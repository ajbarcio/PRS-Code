# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Spline(points=[(1.1, -0.31748), (
    1.113357, -0.317011), (1.12677, -0.316539), (1.140236, -0.316061), (
    1.153752, -0.315575), (1.167317, -0.315078), (1.180926, -0.314567), (
    1.194577, -0.314039), (1.208268, -0.313492), (1.221996, -0.312922), (
    1.235759, -0.312327), (1.249554, -0.311705), (1.263378, -0.311051), (
    1.277229, -0.310364), (1.291105, -0.309641), (1.305004, -0.308879), (
    1.318922, -0.308075), (1.332859, -0.307226), (1.346811, -0.30633), (
    1.360777, -0.305385), (1.374753, -0.304386), (1.388739, -0.303332), (
    1.402732, -0.302221), (1.41673, -0.301048), (1.430731, -0.299812), (
    1.444732, -0.29851), (1.458732, -0.297138), (1.472729, -0.295696), (
    1.486721, -0.294179), (1.500706, -0.292585), (1.514682, -0.290912), (
    1.528647, -0.289157), (1.542599, -0.287316), (1.556536, -0.285389), (
    1.570457, -0.283371), (1.584359, -0.28126), (1.598241, -0.279055), (1.6121, 
    -0.276751), (1.625935, -0.274346), (1.639745, -0.271838), (1.653526, 
    -0.269225), (1.667278, -0.266502), (1.680998, -0.263669), (1.694685, 
    -0.260722), (1.708336, -0.257659), (1.721949, -0.254477), (1.735524, 
    -0.251173), (1.749057, -0.247745), (1.762546, -0.244191), (1.77599, 
    -0.240508), (1.789387, -0.236693), (1.802734, -0.232744), (1.816029, 
    -0.228658), (1.82927, -0.224433), (1.842455, -0.220067), (1.855582, 
    -0.215557), (1.868647, -0.2109), (1.881649, -0.206095), (1.894585, 
    -0.201139), (1.907453, -0.19603), (1.920249, -0.190766), (1.932972, 
    -0.185344), (1.945618, -0.179763), (1.958185, -0.174021), (1.970669, 
    -0.168115), (1.983068, -0.162044), (1.995378, -0.155807), (2.007596, 
    -0.149401), (2.019719, -0.142825), (2.031744, -0.136078), (2.043667, 
    -0.129159), (2.055485, -0.122066), (2.067193, -0.114798), (2.078789, 
    -0.107355), (2.090269, -0.099736), (2.101627, -0.091941), (2.112862, 
    -0.083968), (2.123968, -0.075819), (2.134942, -0.067492), (2.14578, 
    -0.058989), (2.156477, -0.050309), (2.167029, -0.041453), (2.177433, 
    -0.032422), (2.187683, -0.023217), (2.197775, -0.013839), (2.207706, 
    -0.00429), (2.217471, 0.005429), (2.227066, 0.015317), (2.236486, 
    0.025371), (2.245728, 0.035588), (2.254787, 0.045968), (2.263658, 
    0.056506), (2.272339, 0.067201), (2.280825, 0.078049), (2.289112, 
    0.089047), (2.297196, 0.100192), (2.305073, 0.111481), (2.312741, 0.12291), 
    (2.320195, 0.134476), (2.327432, 0.146173), (2.334448, 0.158), (2.341242, 
    0.169951), (2.347808, 0.182022), (2.354146, 0.194209), (2.360252, 
    0.206508), (2.366123, 0.218914), (2.371758, 0.231424), (2.377155, 
    0.244031), (2.38231, 0.256732), (2.387223, 0.269523), (2.391893, 0.282398), 
    (2.396317, 0.295353), (2.400494, 0.308384), (2.404424, 0.321485), (
    2.408106, 0.334653), (2.41154, 0.347883), (2.414724, 0.36117), (2.417659, 
    0.374511), (2.420345, 0.387901), (2.422782, 0.401335), (2.42497, 0.41481), 
    (2.42691, 0.428321), (2.428603, 0.441866), (2.430049, 0.455439), (2.431249, 
    0.469038), (2.432205, 0.482658), (2.432918, 0.496296), (2.433388, 0.50995), 
    (2.433618, 0.523615), (2.433609, 0.537289), (2.433363, 0.550968), (2.43288, 
    0.564651), (2.432164, 0.578333), (2.431216, 0.592013), (2.430037, 
    0.605688), (2.428629, 0.619356), (2.426995, 0.633013), (2.425136, 
    0.646659), (2.423054, 0.66029), (2.420751, 0.673905), (2.41823, 0.687503), 
    (2.415491, 0.70108), (2.412537, 0.714635), (2.409369, 0.728166), (2.40599, 
    0.741672), (2.402402, 0.755151), (2.398606, 0.768602), (2.394603, 
    0.782022), (2.390397, 0.79541), (2.385988, 0.808765), (2.381378, 0.822086), 
    (2.376575, 0.835371), (2.371587, 0.848624), (2.366415, 0.861841), (
    2.361062, 0.875024), (2.355529, 0.88817), (2.349819, 0.90128), (2.343932, 
    0.914351), (2.33787, 0.927384), (2.331635, 0.940378), (2.325229, 0.953331), 
    (2.318654, 0.966243), (2.31191, 0.979114), (2.304999, 0.991941), (2.297923, 
    1.004725), (2.290684, 1.017465), (2.283282, 1.030159), (2.275719, 
    1.042807), (2.267997, 1.055408), (2.260116, 1.067961), (2.252079, 
    1.080464), (2.243886, 1.092918), (2.235538, 1.105322), (2.227038, 
    1.117673), (2.218386, 1.129971), (2.209584, 1.142216), (2.200633, 
    1.154406), (2.191533, 1.166539), (2.182287, 1.178616), (2.172896, 
    1.190635), (2.16336, 1.202594), (2.153681, 1.214493), (2.14386, 1.226331), 
    (2.133898, 1.238106), (2.123796, 1.249818), (2.113557, 1.261465), (2.10318, 
    1.273045), (2.092667, 1.284558), (2.082019, 1.296003), (2.071237, 
    1.307378), (2.060323, 1.318682), (2.049277, 1.329914), (2.038101, 
    1.341072), (2.026796, 1.352156), (2.015364, 1.363163), (2.003804, 
    1.374094), (1.992119, 1.384945), (1.98031, 1.395717), (1.968377, 1.406407), 
    (1.956323, 1.417015), (1.944148, 1.427539), (1.931853, 1.437978), (
    1.919441, 1.448331), (1.906911, 1.458595), (1.894265, 1.468771), (1.881504, 
    1.478856), (1.868631, 1.488849), (1.855645, 1.498748), (1.842548, 
    1.508554), (1.829342, 1.518263), (1.816027, 1.527876), (1.802606, 1.53739), 
    (1.789078, 1.546804), (1.775447, 1.556116), (1.761712, 1.565327), (
    1.747875, 1.574434), (1.733938, 1.583435), (1.719902, 1.592331), (1.705768, 
    1.601118), (1.691537, 1.609797), (1.677212, 1.618366), (1.662793, 
    1.626823), (1.648281, 1.635168), (1.633679, 1.643398), (1.618987, 
    1.651514), (1.604207, 1.659513), (1.58934, 1.667394), (1.574388, 1.675157), 
    (1.559352, 1.6828), (1.544234, 1.690322), (1.529035, 1.697722), (1.513757, 
    1.704998), (1.4984, 1.71215), (1.482967, 1.719176), (1.467459, 1.726076), (
    1.451878, 1.732848), (1.436224, 1.739491), (1.4205, 1.746005), (1.404707, 
    1.752388), (1.388847, 1.758639), (1.37292, 1.764758), (1.35693, 1.770743), 
    (1.340876, 1.776594), (1.324761, 1.782309), (1.308586, 1.787888), (
    1.292353, 1.79333), (1.276063, 1.798634), (1.259718, 1.8038), (1.24332, 
    1.808826), (1.22687, 1.813712), (1.210369, 1.818457), (1.19382, 1.82306), (
    1.177224, 1.827522), (1.160582, 1.83184), (1.143896, 1.836015), (1.127167, 
    1.840046), (1.110398, 1.843933), (1.09359, 1.847675), (1.076744, 1.851271), 
    (1.059862, 1.854722), (1.042945, 1.858026), (1.025996, 1.861184), (
    1.009016, 1.864195), (0.992006, 1.867059), (0.974968, 1.869775), (0.957904, 
    1.872344), (0.940816, 1.874766), (0.923704, 1.87704), (0.90657, 1.879167), 
    (0.889417, 1.881147), (0.872245, 1.882979), (0.855056, 1.884665), (
    0.837853, 1.886204), (0.820635, 1.887597), (0.803406, 1.888846), (0.786166, 
    1.88995), (0.768918, 1.890911), (0.751662, 1.891729), (0.7344, 1.892408), (
    0.717134, 1.892947), (0.699865, 1.89335), (0.682595, 1.893619), (0.665325, 
    1.893757), (0.648057, 1.893768), (0.630792, 1.893656), (0.61353, 1.893426), 
    (0.596274, 1.893084), (0.579025, 1.892638), (0.561783, 1.892096), (
    0.544549, 1.891467), (0.527325, 1.890765), (0.510109, 1.890001), (0.492903, 
    1.889192), (0.475705, 1.888354), (0.458516, 1.887507), (0.441333, 
    1.886671), (0.424155, 1.885865), (0.40698, 1.885111), (0.389805, 1.884425), 
    (0.372626, 1.883822), (0.35544, 1.883311), (0.338239, 1.883031), (0.321013, 
    1.883101), (0.303755, 1.88348), (0.28646, 1.88411), (0.269127, 1.884927), (
    0.251756, 1.885868), (0.234347, 1.886876), (0.216901, 1.887907), (0.199422, 
    1.888921), (0.181912, 1.889891), (0.164372, 1.890793), (0.146807, 
    1.891612), (0.129218, 1.892335), (0.111608, 1.892953), (0.093979, 
    1.893461), (0.076334, 1.893852), (0.058675, 1.894126), (0.041004, 1.89428), 
    (0.023324, 1.894314), (0.005636, 1.894227), (-0.012058, 1.894019), (
    -0.029755, 1.893693), (-0.047453, 1.893248), (-0.06515, 1.892687), (
    -0.082846, 1.892011), (-0.100537, 1.891222), (-0.118222, 1.890322), (
    -0.135899, 1.889312), (-0.153567, 1.888196), (-0.171224, 1.886976), (
    -0.188867, 1.885653), (-0.206496, 1.88423), (-0.224109, 1.88271), (
    -0.241704, 1.881095), (-0.259279, 1.879387), (-0.276833, 1.877589), (
    -0.294365, 1.875704), (-0.311872, 1.873734), (-0.329354, 1.871682), (
    -0.346808, 1.86955), (-0.364234, 1.867341), (-0.38163, 1.865058), (
    -0.398994, 1.862703), (-0.416325, 1.86028), (-0.433622, 1.857791), (
    -0.450882, 1.855238), (-0.468106, 1.852625), (-0.485291, 1.849954), (
    -0.502436, 1.847229), (-0.519539, 1.844451), (-0.5366, 1.841625), (
    -0.553616, 1.838752), (-0.570587, 1.835836), (-0.587512, 1.832879), (
    -0.604388, 1.829885), (-0.621215, 1.826857), (-0.637992, 1.823797), (
    -0.654716, 1.820709), (-0.671387, 1.817595), (-0.688003, 1.814459), (
    -0.704564, 1.811304), (-0.721067, 1.808132), (-0.737512, 1.804947), (
    -0.753897, 1.801752), (-0.770221, 1.798549), (-0.786483, 1.795343), (
    -0.802681, 1.792136), (-0.818815, 1.788931), (-0.834882, 1.785732), (
    -0.850881, 1.782541), (-0.866812, 1.779362), (-0.882672, 1.776198), (
    -0.898461, 1.773052), (-0.914177, 1.769927), (-0.929819, 1.766827), (
    -0.945386, 1.763754), (-0.960875, 1.760712), (-0.976287, 1.757704), (
    -0.991618, 1.754733), (-1.006868, 1.751802), (-1.022036, 1.748915), (
    -1.03712, 1.746074), (-1.052118, 1.743283), (-1.067029, 1.740545), (
    -1.081851, 1.737862), (-1.096584, 1.735239), (-1.111225, 1.732678), (
    -1.125772, 1.730181), (-1.140225, 1.727753), (-1.154581, 1.725396), (
    -1.168838, 1.723113), (-1.182996, 1.720906), (-1.197052, 1.71878), (
    -1.211005, 1.716735), (-1.224853, 1.714776), (-1.238593, 1.712905), (
    -1.252225, 1.711125), (-1.265746, 1.709437), (-1.279154, 1.707845), (
    -1.292447, 1.706351), (-1.30562, 1.70494), (-1.318665, 1.703599), (
    -1.331582, 1.702329), (-1.344369, 1.701135), (-1.357026, 1.700018), (
    -1.36955, 1.698981), (-1.381941, 1.698025), (-1.394198, 1.697154), (
    -1.406319, 1.696368), (-1.418302, 1.69567), (-1.430148, 1.695061), (
    -1.441854, 1.694542), (-1.45342, 1.694114), (-1.464844, 1.693778), (
    -1.476127, 1.693534), (-1.487266, 1.693383), (-1.498262, 1.693325), (
    -1.509114, 1.69336), (-1.519821, 1.693488), (-1.530384, 1.693708), (
    -1.540801, 1.69402), (-1.551073, 1.694422), (-1.561201, 1.694915), (
    -1.571184, 1.695496), (-1.581024, 1.696164), (-1.590722, 1.696917), (
    -1.600278, 1.697754), (-1.609695, 1.698673), (-1.618974, 1.699672), (
    -1.628117, 1.700748), (-1.637126, 1.701899), (-1.646005, 1.703124), (
    -1.654756, 1.704419), (-1.663384, 1.705782), (-1.671891, 1.707211), (
    -1.680281, 1.708703), (-1.688561, 1.710257), (-1.696733, 1.711868), (
    -1.704803, 1.713537), (-1.712778, 1.71526), (-1.720661, 1.717035), (
    -1.728461, 1.718861), (-1.736182, 1.720737), (-1.743832, 1.722661), (
    -1.751418, 1.724632), (-1.758946, 1.726649), (-1.766424, 1.728713), (
    -1.773858, 1.730822), (-1.781257, 1.732977), (-1.788628, 1.735179), (
    -1.795978, 1.737429), (-1.803314, 1.739727), (-1.810645, 1.742075), (
    -1.817977, 1.744475), (-1.825318, 1.746928), (-1.832675, 1.749438), (
    -1.840054, 1.752007), (-1.847463, 1.754636), (-1.854907, 1.757331), (
    -1.862392, 1.760092), (-1.869926, 1.762925), (-1.877512, 1.765831), (
    -1.885157, 1.768815), (-1.892865, 1.77188), (-1.900641, 1.77503), (
    -1.90849, 1.778268), (-1.916415, 1.781597), (-1.924419, 1.78502), (
    -1.932508, 1.788542), (-1.940682, 1.792164), (-1.948946, 1.79589), (
    -1.957302, 1.799723), (-1.965752, 1.803664), (-1.974298, 1.807717), (
    -1.982942, 1.811883), (-1.991686, 1.816163), (-2.000531, 1.82056), (
    -2.009479, 1.825073), (-2.01853, 1.829705), (-2.027686, 1.834456), (
    -2.036948, 1.839325), (-2.046316, 1.844312), (-2.055793, 1.849418), (
    -2.065378, 1.85464), (-2.075072, 1.859979), (-2.084876, 1.865432), (
    -2.094792, 1.870998), (-2.10482, 1.876673), (-2.114961, 1.882457), (
    -2.125216, 1.888346), (-2.135587, 1.894336), (-2.146075, 1.900424), (
    -2.156681, 1.906606), (-2.167407, 1.912879), (-2.178255, 1.919236), (
    -2.189227, 1.925674), (-2.200325, 1.932186), (-2.211551, 1.938768), (
    -2.222908, 1.945413), (-2.234399, 1.952115)])
mdb.models['Model-1'].sketches['__profile__'].Spline(points=[(1.1, 0.31748), (
    1.113298, 0.317945), (1.126535, 0.318404), (1.139709, 0.318859), (1.152819, 
    0.319314), (1.165862, 0.31977), (1.178836, 0.32023), (1.19174, 0.320698), (
    1.204572, 0.321174), (1.217329, 0.321662), (1.23001, 0.322163), (1.242612, 
    0.322681), (1.255133, 0.323217), (1.267571, 0.323772), (1.279925, 0.32435), 
    (1.292192, 0.324952), (1.304369, 0.32558), (1.316454, 0.326236), (1.328446, 
    0.326922), (1.340342, 0.327639), (1.35214, 0.328389), (1.363837, 0.329173), 
    (1.375431, 0.329993), (1.38692, 0.330851), (1.398302, 0.331747), (1.409574, 
    0.332683), (1.420733, 0.333661), (1.431778, 0.33468), (1.442705, 0.335743), 
    (1.453514, 0.33685), (1.4642, 0.338002), (1.474762, 0.3392), (1.485197, 
    0.340444), (1.495503, 0.341736), (1.505678, 0.343074), (1.515718, 
    0.344461), (1.525622, 0.345896), (1.535388, 0.347379), (1.545011, 0.34891), 
    (1.554491, 0.35049), (1.563825, 0.352118), (1.57301, 0.353793), (1.582045, 
    0.355517), (1.590926, 0.357287), (1.599652, 0.359103), (1.60822, 0.360965), 
    (1.616628, 0.362872), (1.624875, 0.364822), (1.632957, 0.366815), (
    1.640873, 0.368848), (1.64862, 0.370921), (1.656198, 0.373033), (1.663604, 
    0.37518), (1.670837, 0.377362), (1.677895, 0.379576), (1.684777, 0.38182), 
    (1.691481, 0.384092), (1.698006, 0.38639), (1.704352, 0.388709), (1.710517, 
    0.391049), (1.716501, 0.393405), (1.722304, 0.395776), (1.727925, 
    0.398157), (1.733365, 0.400545), (1.738623, 0.402937), (1.743701, 0.40533), 
    (1.748599, 0.40772), (1.753319, 0.410103), (1.757862, 0.412475), (1.76223, 
    0.414833), (1.766425, 0.417174), (1.770449, 0.419493), (1.774307, 
    0.421786), (1.778, 0.424051), (1.781532, 0.426283), (1.784908, 0.42848), (
    1.788133, 0.430637), (1.79121, 0.432753), (1.794145, 0.434824), (1.796944, 
    0.436847), (1.799613, 0.438821), (1.802158, 0.440743), (1.804585, 
    0.442612), (1.806903, 0.444428), (1.809117, 0.446189), (1.811235, 
    0.447895), (1.813265, 0.449546), (1.815214, 0.451144), (1.817092, 
    0.452691), (1.818904, 0.454187), (1.82066, 0.455636), (1.822367, 0.45704), 
    (1.824032, 0.458405), (1.825665, 0.459733), (1.827271, 0.461031), (
    1.828857, 0.462303), (1.830431, 0.463556), (1.831999, 0.464796), (1.833566, 
    0.466031), (1.835138, 0.467267), (1.83672, 0.468513), (1.838315, 0.469776), 
    (1.839927, 0.471065), (1.84156, 0.472388), (1.843216, 0.473755), (1.844896, 
    0.475173), (1.846601, 0.476652), (1.848332, 0.478199), (1.850088, 
    0.479825), (1.85187, 0.481536), (1.853675, 0.483342), (1.855501, 0.48525), 
    (1.857346, 0.487267), (1.859207, 0.489401), (1.861081, 0.491659), (
    1.862964, 0.494046), (1.864851, 0.49657), (1.866739, 0.499235), (1.868623, 
    0.502046), (1.870497, 0.505009), (1.872357, 0.508126), (1.874197, 
    0.511402), (1.876012, 0.514839), (1.877797, 0.518441), (1.879546, 
    0.522209), (1.881254, 0.526145), (1.882916, 0.53025), (1.884525, 0.534526), 
    (1.886078, 0.538972), (1.887569, 0.54359), (1.888994, 0.548378), (1.890346, 
    0.553336), (1.891622, 0.558464), (1.892817, 0.56376), (1.893927, 0.569223), 
    (1.894948, 0.574852), (1.895876, 0.580644), (1.896707, 0.586598), (
    1.897438, 0.592712), (1.898065, 0.598982), (1.898586, 0.605408), (1.898996, 
    0.611986), (1.899295, 0.618714), (1.899478, 0.625589), (1.899544, 
    0.632609), (1.89949, 0.63977), (1.899315, 0.647069), (1.899016, 0.654505), 
    (1.898592, 0.662073), (1.898041, 0.669771), (1.897362, 0.677596), (
    1.896546, 0.685543), (1.895583, 0.693605), (1.894471, 0.701779), (1.89321, 
    0.710061), (1.891799, 0.718448), (1.890238, 0.726936), (1.888524, 
    0.735521), (1.886659, 0.744201), (1.884641, 0.752971), (1.882471, 
    0.761828), (1.880147, 0.770769), (1.87767, 0.779791), (1.875039, 0.788889), 
    (1.872255, 0.798061), (1.869317, 0.807304), (1.866225, 0.816614), (1.86298, 
    0.825988), (1.859581, 0.835423), (1.85603, 0.844916), (1.852326, 0.854464), 
    (1.848469, 0.864064), (1.84446, 0.873712), (1.840299, 0.883407), (1.835987, 
    0.893145), (1.831524, 0.902923), (1.82691, 0.912738), (1.822147, 0.922588), 
    (1.817234, 0.93247), (1.812173, 0.942382), (1.806963, 0.952319), (1.801606, 
    0.962281), (1.796102, 0.972264), (1.790452, 0.982266), (1.784656, 
    0.992284), (1.778716, 1.002316), (1.772632, 1.01236), (1.766404, 1.022412), 
    (1.760034, 1.032471), (1.753522, 1.042534), (1.746869, 1.052598), (
    1.740077, 1.062663), (1.733144, 1.072724), (1.726073, 1.082781), (1.718865, 
    1.09283), (1.71152, 1.10287), (1.704038, 1.112899), (1.696422, 1.122914), (
    1.688671, 1.132913), (1.680787, 1.142894), (1.672771, 1.152856), (1.664623, 
    1.162795), (1.656344, 1.172711), (1.647935, 1.182601), (1.639398, 
    1.192464), (1.630732, 1.202297), (1.621939, 1.212098), (1.61302, 1.221866), 
    (1.603976, 1.231598), (1.594808, 1.241294), (1.585516, 1.250951), (
    1.576101, 1.260567), (1.566565, 1.270141), (1.556908, 1.279671), (1.547131, 
    1.289156), (1.537236, 1.298593), (1.527223, 1.307981), (1.517092, 
    1.317319), (1.506846, 1.326604), (1.496484, 1.335836), (1.486009, 
    1.345012), (1.475419, 1.354131), (1.464718, 1.363193), (1.453905, 
    1.372194), (1.442982, 1.381134), (1.431948, 1.390012), (1.420807, 
    1.398826), (1.409557, 1.407574), (1.398201, 1.416255), (1.386738, 
    1.424868), (1.375171, 1.433412), (1.363499, 1.441885), (1.351724, 
    1.450286), (1.339847, 1.458614), (1.327868, 1.466867), (1.315789, 
    1.475045), (1.30361, 1.483145), (1.291332, 1.491168), (1.278957, 1.499111), 
    (1.266485, 1.506975), (1.253916, 1.514756), (1.241252, 1.522456), (
    1.228494, 1.530072), (1.215643, 1.537603), (1.202699, 1.545049), (1.189663, 
    1.552408), (1.176537, 1.559679), (1.163321, 1.566863), (1.150016, 
    1.573957), (1.136622, 1.58096), (1.123141, 1.587873), (1.109574, 1.594693), 
    (1.095922, 1.601421), (1.082184, 1.608055), (1.068363, 1.614595), (
    1.054459, 1.621039), (1.040473, 1.627388), (1.026406, 1.633639), (1.012259, 
    1.639794), (0.998032, 1.64585), (0.983726, 1.651807), (0.969343, 1.657664), 
    (0.954883, 1.663422), (0.940346, 1.669078), (0.925735, 1.674633), (0.91105, 
    1.680086), (0.896291, 1.685435), (0.88146, 1.690681), (0.866557, 1.695823), 
    (0.851583, 1.70086), (0.836539, 1.705791), (0.821426, 1.710616), (0.806246, 
    1.715334), (0.790997, 1.719943), (0.775683, 1.724443), (0.760303, 
    1.728832), (0.744858, 1.733111), (0.72935, 1.737276), (0.713779, 1.741327), 
    (0.698146, 1.745262), (0.682452, 1.749078), (0.666697, 1.752774), (
    0.650884, 1.756345), (0.635013, 1.75979), (0.619085, 1.763104), (0.603102, 
    1.766281), (0.587063, 1.769317), (0.570972, 1.772204), (0.554828, 
    1.774934), (0.538635, 1.777499), (0.522392, 1.779886), (0.506104, 
    1.782083), (0.489771, 1.784076), (0.473397, 1.785847), (0.456985, 
    1.787379), (0.440538, 1.788652), (0.424061, 1.789647), (0.407558, 
    1.790346), (0.391035, 1.790731), (0.374498, 1.790789), (0.357951, 
    1.790512), (0.341405, 1.789761), (0.324874, 1.788413), (0.308366, 
    1.786511), (0.291889, 1.784117), (0.275445, 1.781299), (0.259039, 
    1.778122), (0.24267, 1.774646), (0.22634, 1.77092), (0.210048, 1.766986), (
    0.193794, 1.762875), (0.177578, 1.758612), (0.161398, 1.754218), (0.145253, 
    1.749707), (0.129145, 1.745091), (0.113071, 1.740379), (0.097031, 1.73558), 
    (0.081026, 1.730698), (0.065054, 1.725738), (0.049114, 1.720704), (
    0.033208, 1.715598), (0.017334, 1.710425), (0.001492, 1.705185), (
    -0.014318, 1.699882), (-0.030097, 1.694516), (-0.045844, 1.689089), (
    -0.06156, 1.683603), (-0.077245, 1.678059), (-0.092899, 1.672458), (
    -0.108523, 1.666802), (-0.124117, 1.661092), (-0.13968, 1.655328), (
    -0.155213, 1.649514), (-0.170717, 1.643648), (-0.18619, 1.637734), (
    -0.201635, 1.631771), (-0.21705, 1.625762), (-0.232435, 1.619707), (
    -0.247792, 1.613609), (-0.263121, 1.607467), (-0.27842, 1.601284), (
    -0.293691, 1.595061), (-0.308934, 1.588799), (-0.32415, 1.5825), (
    -0.339337, 1.576165), (-0.354497, 1.569795), (-0.36963, 1.563393), (
    -0.384735, 1.55696), (-0.399815, 1.550496), (-0.414867, 1.544004), (
    -0.429894, 1.537486), (-0.444894, 1.530942), (-0.459869, 1.524376), (
    -0.474819, 1.517787), (-0.489744, 1.511178), (-0.504644, 1.504551), (
    -0.51952, 1.497908), (-0.534373, 1.49125), (-0.549202, 1.484578), (
    -0.564008, 1.477896), (-0.578792, 1.471203), (-0.593554, 1.464504), (
    -0.608294, 1.457799), (-0.623013, 1.45109), (-0.637712, 1.444379), (
    -0.652391, 1.437668), (-0.66705, 1.430959), (-0.681691, 1.424255), (
    -0.696314, 1.417556), (-0.710919, 1.410866), (-0.725507, 1.404185), (
    -0.740079, 1.397517), (-0.754635, 1.390864), (-0.769177, 1.384226), (
    -0.783705, 1.377608), (-0.798219, 1.371009), (-0.812721, 1.364434), (
    -0.827212, 1.357884), (-0.841692, 1.351361), (-0.856162, 1.344868), (
    -0.870623, 1.338407), (-0.885077, 1.33198), (-0.899523, 1.325589), (
    -0.913964, 1.319237), (-0.9284, 1.312926), (-0.942832, 1.306659), (
    -0.957261, 1.300438), (-0.971688, 1.294265), (-0.986115, 1.288143), (
    -1.000543, 1.282074), (-1.014972, 1.276061), (-1.029405, 1.270107), (
    -1.043842, 1.264213), (-1.058284, 1.258383), (-1.072733, 1.252619), (
    -1.08719, 1.246923), (-1.101656, 1.241299), (-1.116132, 1.235749), (
    -1.130621, 1.230276), (-1.145122, 1.224882), (-1.159638, 1.219571), (
    -1.174174, 1.214359), (-1.188734, 1.209265), (-1.20332, 1.204289), (
    -1.21793, 1.199433), (-1.232567, 1.194699), (-1.247231, 1.190089), (
    -1.261921, 1.185605), (-1.276638, 1.181248), (-1.291383, 1.177021), (
    -1.306157, 1.172925), (-1.320958, 1.168963), (-1.335788, 1.165137), (
    -1.350648, 1.16145), (-1.365536, 1.157902), (-1.380453, 1.154498), (
    -1.395399, 1.151238), (-1.410374, 1.148125), (-1.425379, 1.145161), (
    -1.440412, 1.142349), (-1.455473, 1.13969), (-1.470563, 1.137187), (
    -1.48568, 1.134843), (-1.500824, 1.132658), (-1.515994, 1.130636), (
    -1.53119, 1.128779), (-1.54641, 1.127087), (-1.561653, 1.125564), (
    -1.57692, 1.124211), (-1.592207, 1.12303), (-1.607514, 1.122022), (
    -1.622839, 1.121189), (-1.638181, 1.120533), (-1.653538, 1.120055), (
    -1.668909, 1.119756), (-1.68429, 1.119637), (-1.699681, 1.1197), (
    -1.715079, 1.119944), (-1.730482, 1.120372), (-1.745888, 1.120983), (
    -1.761295, 1.121777), (-1.776699, 1.122757), (-1.792099, 1.12392), (
    -1.807491, 1.125268), (-1.822874, 1.126801), (-1.838245, 1.128517), (
    -1.8536, 1.130417), (-1.868938, 1.1325), (-1.884255, 1.134766), (-1.899549, 
    1.137213), (-1.914817, 1.13984), (-1.930056, 1.142646), (-1.945263, 
    1.14563), (-1.960436, 1.14879), (-1.975572, 1.152125), (-1.990668, 
    1.155633), (-2.005722, 1.159312), (-2.020731, 1.163159), (-2.035692, 
    1.167173), (-2.050603, 1.17135), (-2.065461, 1.175689), (-2.080265, 
    1.180187), (-2.095011, 1.18484), (-2.109698, 1.189646), (-2.124323, 
    1.194602), (-2.138885, 1.199703), (-2.153381, 1.204947), (-2.16781, 
    1.21033), (-2.18217, 1.215848), (-2.196459, 1.221497), (-2.210675, 
    1.227274), (-2.224817, 1.233172), (-2.238885, 1.239189), (-2.252875, 
    1.245319), (-2.266788, 1.251558), (-2.280622, 1.257901), (-2.294376, 
    1.264343), (-2.308049, 1.270878), (-2.32164, 1.277501), (-2.335149, 
    1.284206), (-2.348575, 1.290987), (-2.361916, 1.29784), (-2.375173, 
    1.304756), (-2.388345, 1.311731), (-2.401431, 1.318757), (-2.414431, 
    1.325828), (-2.427343, 1.332937), (-2.440169, 1.340076), (-2.452906, 
    1.347239), (-2.465555, 1.354417), (-2.478114, 1.361603), (-2.490583, 
    1.36879), (-2.502962, 1.375967), (-2.51525, 1.383128), (-2.527444, 
    1.390262), (-2.539545, 1.397361), (-2.551552, 1.404416), (-2.563462, 
    1.411416), (-2.575274, 1.418351), (-2.586987, 1.425211), (-2.598598, 
    1.431986)])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(1.1, -0.31748), 
    point2=(1.1, 0.31748))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-2.234399, 1.952115)
    , point2=(-2.598598, 1.431986))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Base Flexure', 
    part=mdb.models['Model-1'].parts['Part-1'])
mdb.models['Model-1'].rootAssembly.RadialInstancePattern(axis=(0.0, 0.0, 1.0), 
    instanceList=('Base Flexure', ), number=2, point=(0.0, 0.0, 0.0), 
    totalAngle=360.0)
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.52)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Part-1'].faces.findAt(((1.249371, -0.095522, 
    0.0), )))
mdb.models['Model-1'].parts['Part-1'].setMeshControls(regions=
    mdb.models['Model-1'].parts['Part-1'].faces.findAt(((1.249371, -0.095522, 
    0.0), )), technique=STRUCTURED)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Part-1'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure'].edges.findAt((
    (1.1, -0.15874, 0.0), ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure-rad-2'].edges.findAt(
    ((-1.1, 0.15874, 0.0), ), ), name='Root')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=
    mdb.models['Model-1'].rootAssembly.datums[1], name='BC-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Root'], u1=SET, u2=SET, ur3=SET)
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure-rad-2'].edges.findAt(
    ((2.325449, -1.822083, 0.0), )), name='Tip')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=
    mdb.models['Model-1'].rootAssembly.datums[1], name='BC-2', region=
    mdb.models['Model-1'].rootAssembly.sets['Tip'], u1=UNSET, u2=UNSET, ur3=
    SET)
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure-rad-2'].edges.findAt(
    ((2.325449, -1.822083, 0.0), ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure'].edges.findAt((
    (-2.325449, 1.822083, 0.0), ), ), name='Tip')
mdb.models['Model-1'].StaticStep(description='Positive Torque', name='Step-1', 
    previous='Initial')
mdb.models['Model-1'].rootAssembly.Set(name='Set-3', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure'].vertices.findAt(
    ((-2.234399, 1.952115, 0.0), ), ((-2.598598, 1.431986, 0.0), ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure-rad-2'].vertices.findAt(
    ((2.234399, -1.952115, 0.0), ), ((2.598598, -1.431986, 0.0), ), ))
mdb.models['Model-1'].Moment(cm3=1138.65, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=
    mdb.models['Model-1'].rootAssembly.datums[1], name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-3'])
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=FULL, 
    numCpus=16, numDomains=16, numGPUs=0, numThreadsPerMpiProcess=1, queue=None
    , resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', 
    waitHours=0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '28 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO SECTION DEFINITIONS FOUND', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '4 nodes have inactive dof on which boundary conditions are specified. The nodes have been identified in node set ErrNodeBCInactiveDof.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].Material(name='Marging300Steel')
mdb.models['Model-1'].materials['Marging300Steel'].Elastic(table=((27500000.0, 
    0.33), ))
mdb.models['Model-1'].materials['Marging300Steel'].Plastic(scaleStress=None, 
    table=((309700.0, 0.0), ))
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '28 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO SECTION DEFINITIONS FOUND', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '4 nodes have inactive dof on which boundary conditions are specified. The nodes have been identified in node set ErrNodeBCInactiveDof.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Part-1'].regenerate()
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements[6:12], name=
    'PoorElements-1')
mdb.models['Model-1'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Part-1'].faces.findAt(((1.249371, -0.095522, 
    0.0), )))
mdb.models['Model-1'].parts['Part-1'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['Model-1'].parts['Part-1'].faces.findAt(((1.249371, -0.095522, 
    0.0), )), technique=SWEEP)
mdb.models['Model-1'].parts['Part-1'].setSweepPath(edge=
    mdb.models['Model-1'].parts['Part-1'].edges.findAt((2.433334, 0.552018, 
    0.0), ), region=mdb.models['Model-1'].parts['Part-1'].faces.findAt((
    1.249371, -0.095522, 0.0), ), sense=FORWARD)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].parts['Part-1'].deleteMesh()
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.005, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    material='Marging300Steel', name='Section-1', nodalThicknessField='', 
    poissonDefinition=DEFAULT, preIntegrate=ON, thickness=0.375, 
    thicknessField='', thicknessModulus=None, thicknessType=UNIFORM, 
    useDensity=OFF)
mdb.models['Model-1'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Marging300Steel', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.375, 
    thicknessField='', thicknessType=UNIFORM)
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(2.5, 0.0))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(1.1, 0.0))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-2'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='Part-2-1', 
    part=mdb.models['Model-1'].parts['Part-2'])
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure'], 
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure-rad-2']))
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].ConstructionLine(point1=(
    -4.5297966003418, 0.734573364257812), point2=(-4.28903675079346, 
    0.611982226371765))
mdb.models['Model-1'].sketches['__edit__'].ConstructionLine(point1=(
    -4.5910062789917, 1.50689804553986), point2=(-4.6822286175011, 
    0.812189355749069))
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].CircleByCenterPerimeter(center=(0.0, 
    0.0), point1=(1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.1, -0.285732))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    1.1, 0.0), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.1, 
    -0.285732), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, -0.31748))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 0.31748))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, -0.31748), 
    ), entity2=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 
    0.31748), ), midpoint=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].Arc3Points(point1=(1.1, 0.31748), 
    point2=(0.973739909002507, 0.511693843636789), point3=(1.06099534034729, 
    0.373583525419235))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((0.97374, 0.511694))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    0.973739909002507, 0.511693843636789), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ), 
    ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.034731, 
    0.413196))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.034731, 
    0.413196), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.024829, 
    0.428543))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.024829, 
    0.428543), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((4.205564, 
    4.557635))
mdb.models['Model-1'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((4.205564, 
    4.557635), ), ))
mdb.models['Model-1'].sketches['__edit__'].Arc3Points(point1=(
    0.775599442627194, 0.575325992386759), point2=(1.1, 0.31748), point3=(
    0.794437192781901, 0.557339320729637))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((0.794437, 
    0.557339))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.049133, 
    -0.464368))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    0.794437192781901, 0.557339320729637), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.049133, 
    -0.464368), ))
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.598598, 
    1.431986))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.598598, 
    1.431986), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, -0.31748))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, -0.31748), 
    ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.23001, 0.322163))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.23001, 
    0.322163), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.416498, 
    1.692051))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.416498, 
    1.692051), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.51525, 
    1.383128))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.51525, 
    1.383128), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.527444, 
    1.390262))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.527444, 
    1.390262), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.539545, 
    1.397361))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.539545, 
    1.397361), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.551552, 
    1.404416))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.551552, 
    1.404416), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ))
mdb.models['Model-1'].sketches['__edit__'].CircleByCenterPerimeter(center=(0.0, 
    0.0), point1=(1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.1, -0.285732))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    1.1, 0.0), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.1, 
    -0.285732), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, -0.31748))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 0.31748))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, -0.31748), 
    ), entity2=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 
    0.31748), ), midpoint=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ), 
    ))
mdb.models['Model-1'].sketches['__edit__'].Arc3Points(point1=(
    0.946824689884383, 0.559931251695546), point2=(1.1, 0.31748), point3=(
    1.03465604782104, 0.423017024993896))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((0.946825, 
    0.559931))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    0.946824689884383, 0.559931251695546), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.024382, 
    0.439318))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.024382, 
    0.439318), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ))
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.024382, 
    0.439318))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.024382, 
    0.439318), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.017047, 
    0.452026))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    1.01704653613672, 0.452026428375575), ), points=((1.01704653613672, 
    0.452026428375575), (1.01704653613672, 0.452026428375575)))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((0.919211, 
    0.604195))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    0.919210921112806, 0.604194738893799), ), points=((0.919210921112806, 
    0.604194738893799), (0.919210921112806, 0.604194738893799)))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 0.31748))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.1, 0.31748), 
    ), points=((1.1, 0.31748), (1.1, 0.31748)))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.017047, 
    0.452026))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    1.01704653613672, 0.452026428375575), ), points=((1.01704653613672, 
    0.452026428375575), (1.01704653613672, 0.452026428375575)))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.017047, 
    0.452026))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    1.01704653613672, 0.452026428375575), ), points=((1.01704653613672, 
    0.452026428375575), (1.01704653613672, 0.452026428375575)))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.010961, 
    0.461692), ), ))
mdb.models['Model-1'].sketches['__edit__'].Arc3Points(point1=(1.03898070177213, 
    0.361274274402561), point2=(1.1, 0.31748), point3=(1.07152104377747, 
    0.324224770069122))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.038981, 
    0.361274))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    1.03898070177213, 0.361274274402561), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.062506, 
    0.329645))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.062506, 
    0.329645), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.062603, 
    0.329575))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.062603, 
    0.329575), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.0706, 0.323825))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    1.07059976236173, 0.323825146842966), ), points=((1.07059976236173, 
    0.323825146842966), (1.07059976236173, 0.323825146842966), (
    1.07273781299591, 0.356309533119202), (1.09585523605347, 
    0.370930433273315), (1.09342181682587, 0.340876370668411), (
    1.08247148990631, 0.327880024909973), (1.07152104377747, 0.32828614115715), 
    (1.04759252071381, 0.329504549503326), (1.02934181690216, 
    0.308385491371155), (1.06057071685791, 0.31935116648674), (
    1.04799807071686, 0.316102087497711), (1.05489277839661, 
    0.309603899717331), (1.07314336299896, 0.325443208217621), (
    1.07111549377441, 0.329504549503326), (1.07030439376831, 
    0.327473878860474)))
mdb.models['Model-1'].sketches['__edit__'].Arc3Points(point1=(1.1, -0.31748), 
    point2=(1.04134907684734, -0.354389757398807), point3=(1.07775771617889, 
    -0.311197549104691))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.041349, 
    -0.35439))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    1.04134907684734, -0.354389757398807), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.058771, 
    -0.31702))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ), 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((
    1.058771, -0.31702), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.068047, 
    -0.316046))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.068047, 
    -0.316046), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.142543, 
    -0.439695))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.142543, 
    -0.439695), ), points=((1.17008957149744, -0.386507508337528), (
    1.16628694534302, -0.386432111263275), (1.06925392150879, 
    -0.321385324001312), (1.05562114715576, -0.382416903972626), (
    1.15906953811646, -0.387235164642334), (1.16708886623383, 
    -0.375189483165741)))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.142543, 
    -0.439695))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.142543, 
    -0.439695), ), ))
mdb.models['Model-1'].sketches['__edit__'].Arc3Points(point1=(1.0459520631233, 
    -0.34056465120168), point2=(1.1, -0.31748), point3=(1.08170318603516, 
    -0.312872231006622))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.045952, 
    -0.340565))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    1.0459520631233, -0.34056465120168), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.067359, 
    -0.315872))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.067359, 
    -0.315872), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018), ))
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.067359, 
    -0.315872))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-1.1, 0.0), ), 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((
    1.067359, -0.315872), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.068273, 
    -0.31554))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.068273, 
    -0.31554), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018), ))
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((1.081749, 
    -0.312897))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    1.08174914388567, -0.31289742124806), ), points=((1.08174914388567, 
    -0.31289742124806), (1.08174914388567, -0.31289742124806), (
    1.07155275344849, -0.316531449556351), (1.06830477714539, 
    -0.317751199007034), (1.06546258926392, -0.318970948457718), (
    1.06343257427216, -0.321410417556763), (1.06343257427216, 
    -0.325476229190826), (1.06343257427216, -0.32954204082489), (
    1.0646505355835, -0.330355226993561)))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.061443, 
    -0.332715))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.061443, 
    -0.332715), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018), ))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(1.03984008193449, 
    0.358793260809742), point2=(1.03843991418766, -0.362825777229153))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.1, -0.247634))
mdb.models['Model-1'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.1, 
    -0.247634), ), ))
mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Part-1'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure-rad-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Part-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure']), name=
    'Part-3', originalInstances=SUPPRESS)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(11.25, 0.0))
mdb.models['Model-1'].sketches['__profile__'].geometry.findAt((-11.25, 0.0))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry.findAt((-11.25, 
    0.0), ), radius=2.95, textPoint=(-20.8118286132812, 3.39393997192383))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(61.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].geometry.findAt((-61.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry.findAt((-61.0, 0.0), 
    ), radius=3.05, textPoint=(-63.9812164306641, 22.1414699554443))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Part-4', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-4'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='Part-4-1', 
    part=mdb.models['Model-1'].parts['Part-4'])
mdb.models['Model-1'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['Model-1'].rootAssembly.instances['Part-3-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Part-4-1']), name='Part-5', 
    originalInstances=SUPPRESS)
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].CircleByCenterPerimeter(center=(0.0, 
    0.0), point1=(5.9, 0.0))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-5.9, 0.0))
mdb.models['Model-1'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-5.9, 0.0), ), 
    radius=2.95, textPoint=(-6.03303003311157, 0.434106230735779))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0))
mdb.models['Model-1'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0), ), 
    ))
mdb.models['Model-1'].sketches['__edit__'].Arc3Points(point1=(
    -2.17267124423471, 1.9159625861746), point2=(-2.16727043166334, 
    2.00135925711448), point3=(-2.19245922151446, 1.97373315369535))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.172671, 
    1.915963))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    -2.17267124423471, 1.9159625861746), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.16727, 
    2.001359))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    -2.16727043166334, 2.00135925711448), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.192459, 
    1.973733))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    -2.19245922151446, 1.97373315369535), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.195256, 
    1.96026))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.195256, 
    1.96026), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.192084, 
    1.950435))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.192084, 
    1.950435), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018), ))
mdb.models['Model-1'].sketches['__edit__'].Arc3Points(point1=(
    -2.61025288798475, 1.37443801634241), point2=(-2.53434525710879, 
    1.39430872200766), point3=(-2.57982420921326, 1.40131556987762))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.610253, 
    1.374438))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    -2.61025288798475, 1.37443801634241), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.534345, 
    1.394309))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    -2.53434525710879, 1.39430872200766), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.576954, 
    1.402157))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0), ), 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((
    -2.576954, 1.402157), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.57577, 
    1.402409))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.57577, 
    1.402409), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.57577, 
    1.402409))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.57577, 
    1.402409), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.577565, 
    1.399794))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0))
mdb.models['Model-1'].sketches['__edit__'].TangentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.577565, 
    1.399794), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.95, 0.0), ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.577565, 
    1.399794))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.577565, 
    1.399794), ), points=((-2.61065606673552, 1.37362936569364), (
    -2.61046290397644, 1.37352108955383), (-2.61531853675842, 
    1.35866379737854), (-2.60169577598572, 1.37446653842926)))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.579495, 
    1.399204))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    -2.5794949243936, 1.39920425962318), ), points=((-2.5794949243936, 
    1.39920425962318), (-2.5794949243936, 1.39920425962318), (
    -2.56784129142761, 1.39904868602753), (-2.58078956604004, 
    1.39459145069122)))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.172671, 
    1.915963))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    -2.17267124423471, 1.9159625861746), ), points=((-2.17267124423471, 
    1.9159625861746), (-2.16727089881897, 1.91259670257568)))
mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((-2.611371, 
    1.372313))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices.findAt((
    -2.61137060932181, 1.37231320797048), ), points=((-2.61137060932181, 
    1.37231320797048), (-2.61137060932181, 1.37231320797048), (
    -2.60984015464783, 1.37185597419739), (-2.60947871208191, 
    1.37390732765198)))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.577564, 
    1.399794))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.577564, 
    1.399794), ), points=((-2.61065321205407, 1.37363445776648), (
    -2.61092472076416, 1.37378668785095), (-2.61032223701477, 
    1.37354528903961)))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.577565, 
    1.399794))
mdb.models['Model-1'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.577565, 
    1.399794), ), radius=0.125, textPoint=(-2.58573937416077, 
    1.38054430484772))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].dimensions[1], ))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(-2.61137060932181, 
    1.37231320797049), point2=(-2.70462260629574, 1.42131848767895))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.577565, 
    1.399794))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.657997, 
    1.396816))
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.577565, 
    1.399794), ), entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.657997, 
    1.396816), ))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(-2.70462260629574, 
    1.42131848767895), point2=(-2.23934030532837, 2.03496885299683))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(-2.23934030532837, 
    2.03496885299683), point2=(-2.18307641033357, 1.98410619338912))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.252609, 
    1.926109))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.252609, 
    1.926109), ), point1=(-2.53177261352539, 1.51436305046082))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.325448, 
    1.822084))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-2.325448, 
    1.822084), ), point1=(-2.26900768280029, 1.91754961013794))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433334, 
    0.552018), ), point1=(-2.22767019271851, 1.95239973068237))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433444, 
    0.547683))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((2.433444, 
    0.547683), ), point1=(-2.20175814628601, 1.93088173866272))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.662005, 
    1.165951), ), point1=(-2.59073972702026, 1.42630243301392))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.664725, 
    1.162672))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((1.664725, 
    1.162672), ), point1=(-2.57618379592896, 1.41642820835114))
mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Part-1'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['Part-3-1'].resume()
mdb.models['Model-1'].rootAssembly.features['Part-3-1'].suppress()
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Part-2-1', 'Part-3-1', 
    'Part-4-1'))
del mdb.models['Model-1'].rootAssembly.features['Part-5-1']
mdb.models['Model-1'].rootAssembly.features['Base Flexure'].resume()
mdb.models['Model-1'].rootAssembly.features['Base Flexure-rad-2'].resume()
del mdb.models['Model-1'].parts['Part-5']
del mdb.models['Model-1'].parts['Part-3']
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='Part-2-1', 
    part=mdb.models['Model-1'].parts['Part-2'])
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(textPoint=(
    -3.43861794471741, 0.300187021493912))
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-4'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Part-4'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-4'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(textPoint=(
    -6.67932033538818, 1.56559205055237))
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(textPoint=(
    -7.5, 2.07556128501892))
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(textPoint=(
    -7.5, 2.07556128501892))
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='Part-4-1', 
    part=mdb.models['Model-1'].parts['Part-4'])
mdb.models['Model-1'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['Model-1'].rootAssembly.instances['Base Flexure'], 
    mdb.models['Model-1'].rootAssembly.instances['Part-4-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Part-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure-rad-2']), name=
    'Part-3', originalInstances=SUPPRESS)
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Part-3-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.01, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-3-1'], ), size=0.05)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-3-1'], ))
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(localCsys=
    mdb.models['Model-1'].rootAssembly.datums[1], region=Region(
    edges=mdb.models['Model-1'].rootAssembly.instances['Part-3-1'].edges.findAt(
    ((-0.639354, -0.895112, 0.0), ), ((0.639354, 0.895112, 0.0), ), )))
del mdb.models['Model-1'].boundaryConditions['BC-2']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-4'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Part-4'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-4'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(textPoint=(
    -10.6554698944092, 2.6604540348053))
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(textPoint=(
    -10.6554698944092, 2.6604540348053))
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(textPoint=(
    -10.6554698944092, 2.6604540348053))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].dimensions[1], ))
mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-3.05, 0.0))
mdb.models['Model-1'].sketches['__edit__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__edit__'].geometry.findAt((-3.05, 0.0), ), 
    radius=3.125, textPoint=(-6.15449142456055, 1.55450415611267))
mdb.models['Model-1'].parts['Part-4'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Part-4'].regenerate()
mdb.models['Model-1'].rootAssembly.makeDependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Part-3-1'], ))
del mdb.models['Model-1'].rootAssembly.features['Part-3-1']
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Part-4-1', 'Base Flexure', 
    'Base Flexure-rad-2', 'Part-2-1'))
mdb.models['Model-1'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['Model-1'].rootAssembly.instances['Part-4-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure'], 
    mdb.models['Model-1'].rootAssembly.instances['Part-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Base Flexure-rad-2']), name=
    'Part-5', originalInstances=SUPPRESS)
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.01, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ), size=0.01)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.01, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ), size=0.02)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ), size=0.44)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    1.047893, -0.344935, 0.0), ), ((2.433632, 0.534137, 0.0), ), ((-2.18696, 
    1.929337, 0.0), ), ((-1.673822, -1.15156, 0.0), ), ((-2.597284, 1.389519, 
    0.0), ), ((1.673822, 1.15156, 0.0), ), ((1.049022, 0.341639, 0.0), ), ((
    -2.433632, -0.534137, 0.0), ), ), number=200)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.01, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ), size=0.44)
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.433632, 0.534137, 0.0), ), ((-1.673822, -1.15156, 0.0), ), ((1.673822, 
    1.15156, 0.0), ), ((-2.433632, -0.534137, 0.0), ), ), name='Edge Seeds-1')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.433632, 0.534137, 0.0), ), ((-1.673822, -1.15156, 0.0), ), ((1.673822, 
    1.15156, 0.0), ), ((-2.433632, -0.534137, 0.0), ), ), name='Edge Seeds-1')
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.01, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ), size=1.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ), size=0.44)
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    -1.049022, -0.341639, 0.0), ), ((-0.639354, -0.895112, 0.0), ), ((1.047893, 
    -0.344935, 0.0), ), ((2.433632, 0.534137, 0.0), ), ((-2.18696, 1.929337, 
    0.0), ), ((2.433113, 1.668072, 0.0), ), ((2.757883, -1.047177, 0.0), ), ((
    2.597284, -1.389519, 0.0), ), ((-1.673822, -1.15156, 0.0), ), ((2.18696, 
    -1.929337, 0.0), ), ((-2.866782, -0.695744, 0.0), ), ((-2.597284, 1.389519, 
    0.0), ), ((1.673822, 1.15156, 0.0), ), ((1.049022, 0.341639, 0.0), ), ((
    0.639354, 0.895112, 0.0), ), ((-1.047893, 0.344935, 0.0), ), ((-2.433632, 
    -0.534137, 0.0), ), ((0.0, 3.125, 0.0), ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.433632, 0.534137, 0.0), ), ((-1.673822, -1.15156, 0.0), ), ((1.673822, 
    1.15156, 0.0), ), ((-2.433632, -0.534137, 0.0), ), ), number=200)
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.433632, 0.534137, 0.0), ), ((-1.673822, -1.15156, 0.0), ), ((1.673822, 
    1.15156, 0.0), ), ((-2.433632, -0.534137, 0.0), ), ), name='Edge Seeds-2')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.433632, 0.534137, 0.0), ), ((-1.673822, -1.15156, 0.0), ), ((1.673822, 
    1.15156, 0.0), ), ((-2.433632, -0.534137, 0.0), ), ), name='Edge Seeds-2')
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.01, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ), size=0.25)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -0.346147, 0.120942, 0.0), )))
mdb.models['Model-1'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, 
    elemShape=QUAD, regions=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -0.346147, 0.120942, 0.0), )))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -0.346147, 0.120942, 0.0), )))
mdb.models['Model-1'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -0.346147, 0.120942, 0.0), )))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -0.346147, 0.120942, 0.0), )))
mdb.models['Model-1'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, 
    regions=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -0.346147, 0.120942, 0.0), )))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.01, 
    minSizeFactor=0.01, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ), size=0.25)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].rootAssembly.AttachmentPoints(name='Attachment Points-1', 
    points=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt((
    -0.639354, -0.895112, 0.0), ), CENTER), ), setName=
    'Attachment Points-1-Set-1')
mdb.models['Model-1'].rootAssembly.Set(name='m_Set-14', vertices=
    mdb.models['Model-1'].rootAssembly.vertices.findAt(((0.0, 0.0, 0.0), )))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-1', side1Edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    0.0, 3.125, 0.0), )))
mdb.models['Model-1'].Coupling(alpha=0.0, controlPoint=
    mdb.models['Model-1'].rootAssembly.sets['m_Set-14'], couplingType=KINEMATIC
    , influenceRadius=WHOLE_SURFACE, localCsys=
    mdb.models['Model-1'].rootAssembly.datums[1], name='Constraint-1', surface=
    mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-1'], u1=ON, u2=ON, ur3=
    ON)
mdb.models['Model-1'].rootAssembly.Set(name='Set-15', vertices=
    mdb.models['Model-1'].rootAssembly.vertices.findAt(((0.0, 0.0, 0.0), )))
mdb.models['Model-1'].Moment(cm3=4554.6, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=
    mdb.models['Model-1'].rootAssembly.datums[1], name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-15'])
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=FULL, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
del mdb.models['Model-1'].sections['Section-1']
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    material='Marging300Steel', name='Section-1', nodalThicknessField='', 
    poissonDefinition=DEFAULT, preIntegrate=ON, thickness=0.375, 
    thicknessField='', thicknessModulus=None, thicknessType=UNIFORM, 
    useDensity=OFF)
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    material='Marging300Steel', name='Section-2', nodalThicknessField='', 
    poissonDefinition=DEFAULT, preIntegrate=ON, thickness=0.375, 
    thicknessField='', thicknessModulus=None, thicknessType=UNIFORM, 
    useDensity=OFF)
del mdb.models['Model-1'].sections['Section-1']
del mdb.models['Model-1'].sections['Section-2']
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='Marging300Steel', name='Section-1', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=0.375, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].HomogeneousSolidSection(material='Marging300Steel', name=
    'Section-2', thickness=0.375)
mdb.models['Model-1'].parts['Part-5'].Set(faces=
    mdb.models['Model-1'].parts['Part-5'].faces.findAt(((-0.346147, 0.120942, 
    0.0), )), name='Set-1')
mdb.models['Model-1'].parts['Part-5'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-5'].sets['Set-1'], sectionName=
    'Section-2', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    -0.639354, -0.895112, 0.0), ), ((0.639354, 0.895112, 0.0), ), ), name=
    'Set-16')
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(region=
    mdb.models['Model-1'].rootAssembly.sets['Set-16'])
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '571 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 55408, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 45.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Wed Jun 12 16:11:25 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'S', 'MISES', 'MISESMAX', 'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 'UT', 'UR', 
    'RBANG', 'RBROT', 'RF', 'CF', 'CSTRESS', 'CDISP'))
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '571 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 63724, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 45.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Wed Jun 12 16:18:53 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=0.1)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '571 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 62360, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 45.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Wed Jun 12 16:21:34 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'S', 'MISES', 'MISESMAX', 'YIELDPOT', 'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 
    'UT', 'UR', 'RBANG', 'RBROT', 'RF', 'CF', 'CSTRESS', 'CDISP'))
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'S', 'MISES', 'MISESMAX', 'YIELDPOT', 'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 
    'UT', 'UR', 'RBANG', 'RBROT'))
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '571 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 17500, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 45.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Wed Jun 12 16:33:08 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -0.346147, 0.120942, 0.0), )), name='Set-17')
mdb.models['Model-1'].TopologyTask(freezeBoundaryConditionRegions=ON, name=
    'Find gud stiffness', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-17'])
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    0.0, 3.125, 0.0), )), name='p_Set-17')
mdb.models['Model-1'].optimizationTasks['Find gud stiffness'].SingleTermDesignResponse(
    csys=mdb.models['Model-1'].rootAssembly.datums[1], drivingRegion=None, 
    identifier='ROT_Z_ABS', name='D-Response-1', operation=MAXIMUM, region=
    mdb.models['Model-1'].rootAssembly.sets['p_Set-17'], stepOptions=())
mdb.models['Model-1'].optimizationTasks['Find gud stiffness'].ObjectiveFunction(
    name='Objective-1', objectives=((OFF, 'D-Response-1', 1.0, 0.087266, ''), 
    ))
mdb.models['Model-1'].optimizationTasks['Find gud stiffness'].SingleTermDesignResponse(
    drivingRegion=None, identifier='SIG_TOPO_MISES', name='D-Response-2', 
    operation=MAXIMUM, region=MODEL, stepOptions=())
mdb.models['Model-1'].optimizationTasks['Find gud stiffness'].objectiveFunctions['Objective-1'].setValues(
    objectives=((OFF, 'D-Response-1', 1.0, 0.087266, ''), (OFF, 'D-Response-2', 
    1.0, 247760.0, '')))
mdb.models['Model-1'].optimizationTasks['Find gud stiffness'].OptimizationConstraint(
    designResponse='D-Response-2', name='Opt-Constraint-1', restrictionMethod=
    ABSOLUTE_LESS_THAN_EQUAL, restrictionValue=247760.0)
mdb.OptimizationProcess(dataSaveFrequency=OPT_DATASAVE_SPECIFY_CYCLE, 
    description='', maxDesignCycle=50, model='Model-1', name='Opt-Process-1', 
    odbMergeFrequency=2, prototypeJob='Opt-Process-1-Job', saveInitial=False, 
    task='Find gud stiffness')
mdb.optimizationProcesses['Opt-Process-1'].Job(atTime=None, 
    getMemoryFromAnalysis=True, memory=90, memoryUnits=PERCENTAGE, model=
    'Model-1', multiprocessingMode=DEFAULT, name='Opt-Process-1-Job', numCpus=1
    , numGPUs=0, numThreadsPerMpiProcess=1, queue=None, waitHours=0, 
    waitMinutes=0)
mdb.optimizationProcesses['Opt-Process-1'].submit()
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': 'Tosca Configuration Error: The Tosca installation was either not specified or incorrectly specified. Please refer to the Tosca Installation Guide on how to set up Tosca.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ABORTED, {
    'jobName': 'Opt-Process-1'})
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -0.346147, 0.120942, 0.0), )), name='p_Set-18')
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -0.346147, 0.120942, 0.0), )), name='Set-18')
mdb.models['Model-1'].ShapeTask(freezeBoundaryConditionRegions=ON, 
    frozenBoundaryConditionRegion=MODEL, name='Task-2', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-18'], smoothingRegion=
    mdb.models['Model-1'].rootAssembly.sets['p_Set-18'])
mdb.optimizationProcesses['Opt-Process-1'].submit()
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': 'Tosca Configuration Error: The Tosca installation was either not specified or incorrectly specified. Please refer to the Tosca Installation Guide on how to set up Tosca.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ABORTED, {
    'jobName': 'Opt-Process-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '571 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 58816, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 45.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Wed Jun 12 16:50:42 2024', 
    'jobName': 'Job-1'})
mdb.optimizationProcesses['Opt-Process-1'].submit()
mdb.optimizationProcesses['Opt-Process-1']._Message(ERROR, {
    'message': 'Tosca Configuration Error: The Tosca installation was either not specified or incorrectly specified. Please refer to the Tosca Installation Guide on how to set up Tosca.', 
    'jobName': 'Opt-Process-1'})
mdb.optimizationProcesses['Opt-Process-1']._Message(ABORTED, {
    'jobName': 'Opt-Process-1'})
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-1'].features['Shell planar-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '571 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 56144, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 45.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Jun 13 11:20:54 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].constraints['Constraint-1'].setValues(alpha=0.0, ur3=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '571 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 44116, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 45.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Jun 13 15:44:01 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Set(name='m_Set-20', vertices=
    mdb.models['Model-1'].rootAssembly.vertices.findAt(((0.0, 0.0, 0.0), )))
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    0.0, 3.125, 0.0), )), name='s_Set-20')
mdb.models['Model-1'].MultipointConstraint(controlPoint=
    mdb.models['Model-1'].rootAssembly.sets['m_Set-20'], csys=None, mpcType=
    PIN_MPC, name='Constraint-2', surface=
    mdb.models['Model-1'].rootAssembly.sets['s_Set-20'], userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['Model-1'].constraints['Constraint-1'].suppress()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '571 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 51 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 53 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 54 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 55 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 57 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 59 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 60 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 61 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 64 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 65 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 68 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 69 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1325 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1326 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1327 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1328 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1329 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1330 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1347 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1348 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1349 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1350 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1351 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1352 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1359 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1360 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1361 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1362 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1363 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1364 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1379 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1380 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1381 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1382 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1383 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1384 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1392 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1393 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1394 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1395 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1396 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1397 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1398 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1399 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1400 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1401 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1402 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1403 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1404 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1405 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1406 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1407 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1408 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1409 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1410 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1411 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1412 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1444 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1445 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1446 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1447 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1448 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1449 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1450 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1451 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1454 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1455 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1456 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1457 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1458 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1459 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1460 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1461 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1462 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1463 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1464 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1465 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1466 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1467 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1468 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1469 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1470 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1471 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1472 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1492 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1493 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1494 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1495 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1496 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1511 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1512 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1513 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1514 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1515 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1516 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1517 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1524 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1525 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1526 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1527 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1528 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODES 1529 INSTANCE PART-5-1 AND 1 (ASSEMBLY) IN PIN MPC ARE NOT COINCIDENT.  THE MPC WILL CONSTRAIN ROTATIONAL RIGID-BODY MOTION BETWEEN THE NODES.  INTERPRET RESULTS WITH CAUTION OR CONSIDER SUBSTITUTING A BEAM OR LINK MPC.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1 nodes have inactive dof on which boundary conditions are specified. The nodes have been identified in node set ErrNodeBCInactiveDof.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].constraints.delete(('Constraint-1', 'Constraint-2'))
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.datums[1].origin)
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(0.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Set(name='m_Set-20', vertices=
    mdb.models['Model-1'].rootAssembly.vertices.findAt(((0.0, 0.0, 0.0), )))
del mdb.models['Model-1'].rootAssembly.sets['m_Set-20']
del mdb.models['Model-1'].rootAssembly.features['Attachment Points-1']
del mdb.models['Model-1'].rootAssembly.features['RP-1']
del mdb.models['Model-1'].rootAssembly.features['RP-2']
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt((
    -0.639354, -0.895112, 0.0), ), CENTER))
mdb.models['Model-1'].rootAssembly.Set(name='m_Set-21', referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[62], ))
mdb.models['Model-1'].Coupling(alpha=0.0, controlPoint=
    mdb.models['Model-1'].rootAssembly.sets['m_Set-21'], couplingType=KINEMATIC
    , influenceRadius=WHOLE_SURFACE, localCsys=None, name='Constraint-1', 
    surface=Region(
    side1Edges=mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(
    ((0.0, 3.125, 0.0), ), )), u1=ON, u2=ON, ur3=ON)
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    0.0, 3.125, 0.0), )), name='Set-15')
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].Moment(cm3=4554.6, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[62], )))
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '571 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 71272, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 45.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Jun 13 15:56:29 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].setValues(distributionType=UNIFORM, 
    field='', localCsys=mdb.models['Model-1'].rootAssembly.datums[1])
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '571 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 60900, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 45.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Jun 13 15:58:52 2024', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].constraints['Constraint-1']
mdb.models['Model-1'].MultipointConstraint(controlPoint=Region(
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[62], ))
    , csys=mdb.models['Model-1'].rootAssembly.datums[1], mpcType=BEAM_MPC, 
    name='Constraint-1', surface=Region(
    edges=mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(
    ((0.0, 3.125, 0.0), ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '571 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\SMM\\PRS-Code-Git\\ODE-Python\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 50564, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 45.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 24.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Jun 13 16:03:44 2024', 
    'jobName': 'Job-1'})
# Save by ajbarcio on 2024_06_13-16.07.37; build 2023 2022_09_28-13.11.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].constraints['Constraint-1']
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -0.346147, 0.120942, 0.0), )))
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.44, name='__profile__', 
    sheetSize=17.62, transform=
    mdb.models['Model-1'].rootAssembly.MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(
    (-0.346147, 0.120942, 0.0), (0.0, 0.0, 1.0)), sketchPlaneSide=SIDE1, 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['Model-1'].rootAssembly.projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(-2.61137060934478, 1.37231320798256))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(-2.41049243018698, 1.98875620527286))
mdb.models['Model-1'].sketches['__profile__'].vertices.findAt((-2.410492, 
    1.988756))
mdb.models['Model-1'].sketches['__profile__'].geometry.findAt((2.972052, 
    -0.965678))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices.findAt((
    -2.41049243018698, 1.98875620527286), ), entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry.findAt((2.972052, 
    -0.965678), ))
mdb.models['Model-1'].rootAssembly.PartitionFaceBySketch(faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -0.346147, 0.120942, 0.0), )), sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=QUAD_DOMINATED, 
    regions=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -2.413164, 1.789788, 0.0), )))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -2.413164, 1.789788, 0.0), )))
mdb.models['Model-1'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -2.413164, 1.789788, 0.0), )))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'], ))
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -2.413164, 1.789788, 0.0), )), name='b_Set-25')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    -2.304508, 1.841669, 0.0), ), ((2.304508, -1.841669, 0.0), ), ), name=
    't_Set-25')
mdb.models['Model-1'].RigidBody(bodyRegion=
    mdb.models['Model-1'].rootAssembly.sets['b_Set-25'], name='Constraint-1', 
    refPointAtCOM=ON, refPointRegion=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[62], )), tieRegion=
    mdb.models['Model-1'].rootAssembly.sets['t_Set-25'])
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 57184, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 17:03:26 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].parts['Part-5'].DatumCsysByThreePoints(coordSysType=
    CYLINDRICAL, name='Cylindrical_Test', origin=(0.0, 0.0, 0.0), point1=
    mdb.models['Model-1'].parts['Part-5'].vertices.findAt((2.95, 0.0, 0.0), ), 
    point2=mdb.models['Model-1'].parts['Part-5'].InterestingPoint(
    mdb.models['Model-1'].parts['Part-5'].edges.findAt((1.049022, 0.341639, 
    0.0), ), CENTER))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 6036, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 17:10:36 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CYLINDRICAL, name='Cylindrical_Instance', origin=(0.0, 0.0, 0.0), point1=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].vertices.findAt((
    2.95, 0.0, 0.0), ), point2=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt((
    2.433632, 0.534137, 0.0), ), MIDDLE))
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 67640, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 17:12:30 2024', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 26980, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 17:14:02 2024', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 23384, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 17:16:32 2024', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'INTEGRATION AND SECTION POINT OUTPUT VARIABLES WILL NOT BE OUTPUT FOR DEFORMABLE ELEMENTS THAT ARE DECLARED AS RIGID USING THE *RIGID BODY OPTION', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'STRAIN OUTPUT REQUEST LE IS NOT VALID FOR SOME ELEMENTS IN THIS ANALYSIS. THIS REQUEST IS SWITCHED TO THE STRAIN MEASURE, E.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST YIELDPOT IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 68220, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 17:20:43 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=
    ALL)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 45700, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 17:26:26 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.556122, 1.797739, 0.0), ), ((-3.013421, -0.8276, 0.0), ), ), name=
    'Set-28')
mdb.models['Model-1'].PinnedBC(createStepName='Initial', localCsys=
    mdb.models['Model-1'].rootAssembly.datums[75], name='BC-2', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-28'])
del mdb.models['Model-1'].boundaryConditions['BC-2']
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.556122, 1.797739, 0.0), ), ((-3.013421, -0.8276, 0.0), ), ), name=
    'Set-29')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=
    mdb.models['Model-1'].rootAssembly.datums[75], name='BC-2', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-29'], u1=SET, u2=UNSET, ur3=
    UNSET)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Nodes belonging to 1 RIGID BODIES have boundary conditions prescribed at nodes other than the reference node(s). Because different *TRANSFORM options have been used at these nodes. these boundary conditions cannot be transferred to the correspondent reference node(s). Furthermore, these boundary conditions will be neglected.The reference node(s) of these rigid bodies have been identified in node set WarnNodeOverconBoundRBTra.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 26200, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 17:39:27 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-2'].suppress()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 52740, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 17:50:57 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Set(name='m_Set-30', referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[62], ))
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.556122, 1.797739, 0.0), ), ((-3.013421, -0.8276, 0.0), ), ), name=
    's_Set-30')
mdb.models['Model-1'].MultipointConstraint(controlPoint=
    mdb.models['Model-1'].rootAssembly.sets['m_Set-30'], csys=None, mpcType=
    LINK_MPC, name='Constraint-2', surface=
    mdb.models['Model-1'].rootAssembly.sets['s_Set-30'], userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['Model-1'].constraints['Constraint-2'].setValues(csys=
    mdb.models['Model-1'].rootAssembly.datums[1])
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '79 nodes are missing degree of freedoms. The MPC/Equation/kinematic coupling constraints can not be formed. The nodes have been identified in node set ErrNodeMissingDofConstrDef.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    -2.304508, 1.841669, 0.0), ), ((2.304508, -1.841669, 0.0), ), ), name=
    's_Set-32')
mdb.models['Model-1'].constraints['Constraint-2'].setValues(surface=
    mdb.models['Model-1'].rootAssembly.sets['s_Set-32'])
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '26 nodes are missing degree of freedoms. The MPC/Equation/kinematic coupling constraints can not be formed. The nodes have been identified in node set ErrNodeMissingDofConstrDef.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].constraints['Constraint-2'].suppress()
mdb.models['Model-1'].rootAssembly.Set(name='m_Set-33', referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[62], ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-2', side1Edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.556122, 1.797739, 0.0), ), ((-3.013421, -0.8276, 0.0), ), ))
mdb.models['Model-1'].Coupling(alpha=0.0, controlPoint=
    mdb.models['Model-1'].rootAssembly.sets['m_Set-33'], couplingType=KINEMATIC
    , influenceRadius=WHOLE_SURFACE, localCsys=
    mdb.models['Model-1'].rootAssembly.datums[75], name='Constraint-3', 
    surface=mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-2'], u1=ON, u2=
    OFF, ur3=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'One or more kinematic COUPLING constraint(s) have all or some of the nodes associated with each constraint belonging to rigid bodies. The COUPLING constraint(s) will not be applied at the nodes that belong to the rigid bodies. The nodes for which the COUPLING constraint(s) will not be enforced have been identified in node set WarnNodeOverconKCInRbd.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 73076, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 18:01:43 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].constraints['Constraint-3'].suppress()
mdb.models['Model-1'].rootAssembly.Set(name='m_Set-34', referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[62], ))
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.556122, 1.797739, 0.0), ), ((-3.013421, -0.8276, 0.0), ), ), name=
    's_Set-34')
mdb.models['Model-1'].Coupling(alpha=0.0, controlPoint=
    mdb.models['Model-1'].rootAssembly.sets['m_Set-34'], couplingType=KINEMATIC
    , influenceRadius=WHOLE_SURFACE, localCsys=
    mdb.models['Model-1'].rootAssembly.datums[75], name='Constraint-4', 
    surface=mdb.models['Model-1'].rootAssembly.sets['s_Set-34'], u1=ON, u2=OFF, 
    ur3=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'One or more kinematic COUPLING constraint(s) have all or some of the nodes associated with each constraint belonging to rigid bodies. The COUPLING constraint(s) will not be applied at the nodes that belong to the rigid bodies. The nodes for which the COUPLING constraint(s) will not be enforced have been identified in node set WarnNodeOverconKCInRbd.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 47384, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 18:05:31 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].constraints['Constraint-4'].setValues(alpha=0.0, u2=ON, 
    ur3=ON)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'One or more kinematic COUPLING constraint(s) have all or some of the nodes associated with each constraint belonging to rigid bodies. The COUPLING constraint(s) will not be applied at the nodes that belong to the rigid bodies. The nodes for which the COUPLING constraint(s) will not be enforced have been identified in node set WarnNodeOverconKCInRbd.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 61376, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 18:06:35 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].constraints['Constraint-1'].setValues(refPointAtCOM=OFF)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'One or more kinematic COUPLING constraint(s) have all or some of the nodes associated with each constraint belonging to rigid bodies. The COUPLING constraint(s) will not be applied at the nodes that belong to the rigid bodies. The nodes for which the COUPLING constraint(s) will not be enforced have been identified in node set WarnNodeOverconKCInRbd.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 11064, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 18:08:00 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].setValues(cm3=9109.2, distributionType=
    UNIFORM, field='')
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'One or more kinematic COUPLING constraint(s) have all or some of the nodes associated with each constraint belonging to rigid bodies. The COUPLING constraint(s) will not be applied at the nodes that belong to the rigid bodies. The nodes for which the COUPLING constraint(s) will not be enforced have been identified in node set WarnNodeOverconKCInRbd.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 75524, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 18:18:57 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].constraints['Constraint-4'].suppress()
mdb.models['Model-1'].constraints['Constraint-3'].resume()
mdb.models['Model-1'].constraints['Constraint-3'].suppress()
mdb.models['Model-1'].constraints['Constraint-2'].resume()
mdb.models['Model-1'].constraints['Constraint-2'].suppress()
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-3', side1Edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.556122, 1.797739, 0.0), ), ((-3.013421, -0.8276, 0.0), ), ))
mdb.models['Model-1'].SurfaceTraction(createStepName='Step-1', directionVector=
    (mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt((
    0.639354, 0.895112, 0.0), ), MIDDLE), 
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt((
    1.673822, 1.15156, 0.0), ), MIDDLE)), distributionType=UNIFORM, field='', 
    follower=OFF, localCsys=None, magnitude=4000.0, name='Load-2', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-3'], traction=GENERAL)
mdb.models['Model-1'].loads['Load-1'].suppress()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 64052, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 426 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1210 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 824 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': ' 1U', 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.125, 'attempts': 2, 
    'timeIncrement': 0.025, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 456 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 226 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.125, 'attempts': ' 1U', 
    'timeIncrement': 0.0375, 'increment': 3, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.134375, 'attempts': 2, 
    'timeIncrement': 0.009375, 'increment': 3, 'stepTime': 0.134375, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1484375, 'attempts': 1, 
    'timeIncrement': 0.0140625, 'increment': 4, 'stepTime': 0.1484375, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 340 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 74 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1484375, 'attempts': ' 1U', 
    'timeIncrement': 0.02109375, 'increment': 5, 'stepTime': 0.1484375, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1537109375, 'attempts': 2, 
    'timeIncrement': 0.0052734375, 'increment': 5, 'stepTime': 0.1537109375, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 246 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 536 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 197 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1537109375, 
    'attempts': ' 1U', 'timeIncrement': 0.00791015625, 'increment': 6, 
    'stepTime': 0.1537109375, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 102 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 198 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 558 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 228 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1537109375, 
    'attempts': ' 2U', 'timeIncrement': 0.0019775390625, 'increment': 6, 
    'stepTime': 0.1537109375, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.154205322265625, 
    'attempts': 3, 'timeIncrement': 0.000494384765625, 'increment': 6, 
    'stepTime': 0.154205322265625, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 14 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 314 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 124 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.154205322265625, 
    'attempts': ' 1U', 'timeIncrement': 0.000494384765625, 'increment': 7, 
    'stepTime': 0.154205322265625, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.154328918457031, 
    'attempts': 2, 'timeIncrement': 0.00012359619140625, 'increment': 7, 
    'stepTime': 0.154328918457031, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.154452514648438, 
    'attempts': 1, 'timeIncrement': 0.00012359619140625, 'increment': 8, 
    'stepTime': 0.154452514648438, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.154576110839844, 
    'attempts': 1, 'timeIncrement': 0.00012359619140625, 'increment': 9, 
    'stepTime': 0.154576110839844, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.154761505126953, 
    'attempts': 1, 'timeIncrement': 0.000185394287109375, 'increment': 10, 
    'stepTime': 0.154761505126953, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.155039596557617, 
    'attempts': 1, 'timeIncrement': 0.000278091430664063, 'increment': 11, 
    'stepTime': 0.155039596557617, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 4 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 16 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 16 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 16 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.155456733703613, 
    'attempts': 1, 'timeIncrement': 0.000417137145996094, 'increment': 12, 
    'stepTime': 0.155456733703613, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 60 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 64 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 66 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 72 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 72 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 72 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 72 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.156082439422607, 
    'attempts': 1, 'timeIncrement': 0.000625705718994141, 'increment': 13, 
    'stepTime': 0.156082439422607, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 72 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 76 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 82 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 84 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 84 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 84 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.156708145141602, 
    'attempts': 1, 'timeIncrement': 0.000625705718994141, 'increment': 14, 
    'stepTime': 0.156708145141602, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 84 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 84 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.157333850860596, 
    'attempts': 1, 'timeIncrement': 0.000625705718994141, 'increment': 15, 
    'stepTime': 0.157333850860596, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 102 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 104 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 104 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 104 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.15795955657959, 
    'attempts': 1, 'timeIncrement': 0.000625705718994141, 'increment': 16, 
    'stepTime': 0.15795955657959, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 104 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 116 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 120 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 120 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 120 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 120 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.158585262298584, 
    'attempts': 1, 'timeIncrement': 0.000625705718994141, 'increment': 17, 
    'stepTime': 0.158585262298584, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 120 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 126 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 126 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 128 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 128 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 128 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.159210968017578, 
    'attempts': 1, 'timeIncrement': 0.000625705718994141, 'increment': 18, 
    'stepTime': 0.159210968017578, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 128 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 142 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 142 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 142 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 142 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.159210968017578, 
    'attempts': ' 1U', 'timeIncrement': 0.000625705718994141, 'increment': 19, 
    'stepTime': 0.159210968017578, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.159367394447327, 
    'attempts': 2, 'timeIncrement': 0.000156426429748535, 'increment': 19, 
    'stepTime': 0.159367394447327, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.159523820877075, 
    'attempts': 1, 'timeIncrement': 0.000156426429748535, 'increment': 20, 
    'stepTime': 0.159523820877075, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.159758460521698, 
    'attempts': 1, 'timeIncrement': 0.000234639644622803, 'increment': 21, 
    'stepTime': 0.159758460521698, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 22 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 22 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 22 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 22 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.160110419988632, 
    'attempts': 1, 'timeIncrement': 0.000351959466934204, 'increment': 22, 
    'stepTime': 0.160110419988632, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 108 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 108 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 108 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 108 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 108 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.160638359189034, 
    'attempts': 1, 'timeIncrement': 0.000527939200401306, 'increment': 23, 
    'stepTime': 0.160638359189034, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 216 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 218 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 226 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 226 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 226 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.161430267989636, 
    'attempts': 1, 'timeIncrement': 0.000791908800601959, 'increment': 24, 
    'stepTime': 0.161430267989636, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 298 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 314 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 320 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 354 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 628 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 70 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.161430267989636, 
    'attempts': ' 1U', 'timeIncrement': 0.00118786320090294, 'increment': 25, 
    'stepTime': 0.161430267989636, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 10 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 10 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 12 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.161727233789861, 
    'attempts': 2, 'timeIncrement': 0.000296965800225735, 'increment': 25, 
    'stepTime': 0.161727233789861, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 88 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1621726824902, 
    'attempts': 1, 'timeIncrement': 0.000445448700338602, 'increment': 26, 
    'stepTime': 0.1621726824902, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 92 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 94 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 94 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 94 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.162618131190538, 
    'attempts': 1, 'timeIncrement': 0.000445448700338602, 'increment': 27, 
    'stepTime': 0.162618131190538, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 94 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 102 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 104 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 104 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.163063579890877, 
    'attempts': 1, 'timeIncrement': 0.000445448700338602, 'increment': 28, 
    'stepTime': 0.163063579890877, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 206 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 218 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 220 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 220 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 220 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 220 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.163731752941385, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 29, 
    'stepTime': 0.163731752941385, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 220 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 228 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 228 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 228 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 228 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.164399925991893, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 30, 
    'stepTime': 0.164399925991893, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 228 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 236 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 240 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 240 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 240 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 240 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165068099042401, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 31, 
    'stepTime': 0.165068099042401, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 240 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 250 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 250 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 250 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165736272092909, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 32, 
    'stepTime': 0.165736272092909, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 250 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 254 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 258 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 260 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 260 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 260 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.166404445143417, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 33, 
    'stepTime': 0.166404445143417, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 260 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 274 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 276 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 276 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 276 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 276 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.167072618193924, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 34, 
    'stepTime': 0.167072618193924, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 276 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 282 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 286 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 286 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 286 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 286 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 286 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.167740791244432, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 35, 
    'stepTime': 0.167740791244432, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 286 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 298 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 298 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 298 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 298 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.16840896429494, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 36, 
    'stepTime': 0.16840896429494, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 298 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 306 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 310 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 310 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 310 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 310 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.169077137345448, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 37, 
    'stepTime': 0.169077137345448, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 310 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 314 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 314 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 314 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 314 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.169745310395956, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 38, 
    'stepTime': 0.169745310395956, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 314 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 322 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 330 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 332 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 332 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 332 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.170413483446464, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 39, 
    'stepTime': 0.170413483446464, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 332 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 332 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 332 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 332 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 332 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.171081656496972, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 40, 
    'stepTime': 0.171081656496972, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 332 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 340 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 342 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 342 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 342 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 342 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.17174982954748, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 41, 
    'stepTime': 0.17174982954748, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 342 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 350 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 352 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 352 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.172418002597988, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 42, 
    'stepTime': 0.172418002597988, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 352 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 356 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 356 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 358 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 358 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.173086175648496, 
    'attempts': 1, 'timeIncrement': 0.000668173050507903, 'increment': 43, 
    'stepTime': 0.173086175648496, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 494 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 512 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 514 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 516 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 516 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.174088435224257, 
    'attempts': 1, 'timeIncrement': 0.00100225957576185, 'increment': 44, 
    'stepTime': 0.174088435224257, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 616 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 632 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 644 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 644 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 710 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 6 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.174088435224257, 
    'attempts': ' 1U', 'timeIncrement': 0.00150338936364278, 'increment': 45, 
    'stepTime': 0.174088435224257, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 146 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 152 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 154 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Warning message limit reached. No further warning messages will be reported.\nPlease see the dat file for more warnings.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.174464282565168, 
    'attempts': 2, 'timeIncrement': 0.000375847340910696, 'increment': 45, 
    'stepTime': 0.174464282565168, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.175028053576534, 
    'attempts': 1, 'timeIncrement': 0.000563771011366043, 'increment': 46, 
    'stepTime': 0.175028053576534, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.175873710093583, 
    'attempts': 1, 'timeIncrement': 0.000845656517049065, 'increment': 47, 
    'stepTime': 0.175873710093583, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.177142194869157, 
    'attempts': 1, 'timeIncrement': 0.0012684847755736, 'increment': 48, 
    'stepTime': 0.177142194869157, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.177142194869157, 
    'attempts': ' 1U', 'timeIncrement': 0.0012684847755736, 'increment': 49, 
    'stepTime': 0.177142194869157, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.17745931606305, 
    'attempts': 2, 'timeIncrement': 0.000317121193893399, 'increment': 49, 
    'stepTime': 0.17745931606305, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.177776437256944, 
    'attempts': 1, 'timeIncrement': 0.000317121193893399, 'increment': 50, 
    'stepTime': 0.177776437256944, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.178093558450837, 
    'attempts': 1, 'timeIncrement': 0.000317121193893399, 'increment': 51, 
    'stepTime': 0.178093558450837, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.178569240241677, 
    'attempts': 1, 'timeIncrement': 0.000475681790840099, 'increment': 52, 
    'stepTime': 0.178569240241677, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.179282762927937, 
    'attempts': 1, 'timeIncrement': 0.000713522686260148, 'increment': 53, 
    'stepTime': 0.179282762927937, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.179996285614197, 
    'attempts': 1, 'timeIncrement': 0.000713522686260148, 'increment': 54, 
    'stepTime': 0.179996285614197, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.180709808300458, 
    'attempts': 1, 'timeIncrement': 0.000713522686260148, 'increment': 55, 
    'stepTime': 0.180709808300458, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.181423330986718, 
    'attempts': 1, 'timeIncrement': 0.000713522686260148, 'increment': 56, 
    'stepTime': 0.181423330986718, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.182136853672978, 
    'attempts': 1, 'timeIncrement': 0.000713522686260148, 'increment': 57, 
    'stepTime': 0.182136853672978, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.182850376359238, 
    'attempts': 1, 'timeIncrement': 0.000713522686260148, 'increment': 58, 
    'stepTime': 0.182850376359238, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.183563899045498, 
    'attempts': 1, 'timeIncrement': 0.000713522686260148, 'increment': 59, 
    'stepTime': 0.183563899045498, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.184277421731758, 
    'attempts': 1, 'timeIncrement': 0.000713522686260148, 'increment': 60, 
    'stepTime': 0.184277421731758, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.184990944418018, 
    'attempts': 1, 'timeIncrement': 0.000713522686260148, 'increment': 61, 
    'stepTime': 0.184990944418018, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.184990944418018, 
    'attempts': ' 1U', 'timeIncrement': 0.00107028402939022, 'increment': 62, 
    'stepTime': 0.184990944418018, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.185258515425366, 
    'attempts': 2, 'timeIncrement': 0.000267571007347556, 'increment': 62, 
    'stepTime': 0.185258515425366, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.185526086432714, 
    'attempts': 1, 'timeIncrement': 0.000267571007347556, 'increment': 63, 
    'stepTime': 0.185526086432714, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.185793657440061, 
    'attempts': 1, 'timeIncrement': 0.000267571007347556, 'increment': 64, 
    'stepTime': 0.185793657440061, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.186195013951082, 
    'attempts': 1, 'timeIncrement': 0.000401356511021334, 'increment': 65, 
    'stepTime': 0.186195013951082, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.186596370462104, 
    'attempts': 1, 'timeIncrement': 0.000401356511021334, 'increment': 66, 
    'stepTime': 0.186596370462104, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.186997726973125, 
    'attempts': 1, 'timeIncrement': 0.000401356511021334, 'increment': 67, 
    'stepTime': 0.186997726973125, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.187599761739657, 
    'attempts': 1, 'timeIncrement': 0.000602034766532, 'increment': 68, 
    'stepTime': 0.187599761739657, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.188201796506189, 
    'attempts': 1, 'timeIncrement': 0.000602034766532, 'increment': 69, 
    'stepTime': 0.188201796506189, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.188803831272721, 
    'attempts': 1, 'timeIncrement': 0.000602034766532, 'increment': 70, 
    'stepTime': 0.188803831272721, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.189706883422519, 
    'attempts': 1, 'timeIncrement': 0.000903052149798001, 'increment': 71, 
    'stepTime': 0.189706883422519, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.190609935572317, 
    'attempts': 1, 'timeIncrement': 0.000903052149798001, 'increment': 72, 
    'stepTime': 0.190609935572317, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.191512987722115, 
    'attempts': 1, 'timeIncrement': 0.000903052149798001, 'increment': 73, 
    'stepTime': 0.191512987722115, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.192416039871913, 
    'attempts': 1, 'timeIncrement': 0.000903052149798001, 'increment': 74, 
    'stepTime': 0.192416039871913, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.193319092021711, 
    'attempts': 1, 'timeIncrement': 0.000903052149798001, 'increment': 75, 
    'stepTime': 0.193319092021711, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.194673670246408, 
    'attempts': 1, 'timeIncrement': 0.001354578224697, 'increment': 76, 
    'stepTime': 0.194673670246408, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.196028248471105, 
    'attempts': 1, 'timeIncrement': 0.001354578224697, 'increment': 77, 
    'stepTime': 0.196028248471105, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.197382826695802, 
    'attempts': 1, 'timeIncrement': 0.001354578224697, 'increment': 78, 
    'stepTime': 0.197382826695802, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.198737404920499, 
    'attempts': 1, 'timeIncrement': 0.001354578224697, 'increment': 79, 
    'stepTime': 0.198737404920499, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.198737404920499, 
    'attempts': ' 1U', 'timeIncrement': 0.001354578224697, 'increment': 80, 
    'stepTime': 0.198737404920499, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 80, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.199076049476673, 
    'attempts': 2, 'timeIncrement': 0.00033864455617425, 'increment': 80, 
    'stepTime': 0.199076049476673, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 81, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.199414694032848, 
    'attempts': 1, 'timeIncrement': 0.00033864455617425, 'increment': 81, 
    'stepTime': 0.199414694032848, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 82, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.199922660867109, 
    'attempts': 1, 'timeIncrement': 0.000507966834261375, 'increment': 82, 
    'stepTime': 0.199922660867109, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 83, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.200684611118501, 
    'attempts': 1, 'timeIncrement': 0.000761950251392063, 'increment': 83, 
    'stepTime': 0.200684611118501, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 84, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.201446561369893, 
    'attempts': 1, 'timeIncrement': 0.000761950251392063, 'increment': 84, 
    'stepTime': 0.201446561369893, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 85, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.202208511621285, 
    'attempts': 1, 'timeIncrement': 0.000761950251392063, 'increment': 85, 
    'stepTime': 0.202208511621285, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 86, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.202970461872677, 
    'attempts': 1, 'timeIncrement': 0.000761950251392063, 'increment': 86, 
    'stepTime': 0.202970461872677, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 87, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.203732412124069, 
    'attempts': 1, 'timeIncrement': 0.000761950251392063, 'increment': 87, 
    'stepTime': 0.203732412124069, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 88, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.204875337501157, 
    'attempts': 1, 'timeIncrement': 0.00114292537708809, 'increment': 88, 
    'stepTime': 0.204875337501157, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.204875337501157, 
    'attempts': ' 1U', 'timeIncrement': 0.00171438806563214, 'increment': 89, 
    'stepTime': 0.204875337501157, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 89, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.205303934517565, 
    'attempts': 2, 'timeIncrement': 0.000428597016408035, 'increment': 89, 
    'stepTime': 0.205303934517565, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 90, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.205946830042178, 
    'attempts': 1, 'timeIncrement': 0.000642895524612053, 'increment': 90, 
    'stepTime': 0.205946830042178, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 91, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.206911173329096, 
    'attempts': 1, 'timeIncrement': 0.00096434328691808, 'increment': 91, 
    'stepTime': 0.206911173329096, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 92, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.207875516616014, 
    'attempts': 1, 'timeIncrement': 0.00096434328691808, 'increment': 92, 
    'stepTime': 0.207875516616014, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 93, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.208839859902932, 
    'attempts': 1, 'timeIncrement': 0.00096434328691808, 'increment': 93, 
    'stepTime': 0.208839859902932, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 94, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.20980420318985, 
    'attempts': 1, 'timeIncrement': 0.00096434328691808, 'increment': 94, 
    'stepTime': 0.20980420318985, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 95, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.210768546476768, 
    'attempts': 1, 'timeIncrement': 0.00096434328691808, 'increment': 95, 
    'stepTime': 0.210768546476768, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 96, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.211732889763686, 
    'attempts': 1, 'timeIncrement': 0.00096434328691808, 'increment': 96, 
    'stepTime': 0.211732889763686, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 97, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.212697233050604, 
    'attempts': 1, 'timeIncrement': 0.00096434328691808, 'increment': 97, 
    'stepTime': 0.212697233050604, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.212697233050604, 
    'attempts': ' 1U', 'timeIncrement': 0.00144651493037712, 'increment': 98, 
    'stepTime': 0.212697233050604, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 98, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.213058861783198, 
    'attempts': 2, 'timeIncrement': 0.00036162873259428, 'increment': 98, 
    'stepTime': 0.213058861783198, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 99, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.21360130488209, 
    'attempts': 1, 'timeIncrement': 0.00054244309889142, 'increment': 99, 
    'stepTime': 0.21360130488209, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 100, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.214414969530427, 
    'attempts': 1, 'timeIncrement': 0.00081366464833713, 'increment': 100, 
    'stepTime': 0.214414969530427, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-2'].setValues(magnitude=400.0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 3212, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 18:26:03 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-2'].setValues(traction=SHEAR)
del mdb.models['Model-1'].loads['Load-2']
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].faces.findAt(((
    -2.413164, 1.789788, 0.0), )), name='Set-36')
mdb.models['Model-1'].RotationalBodyForce(centrifugal=OFF, createStepName=
    'Step-1', magnitude=386.08, name='Load-2', point1=(0.0, 0.0, 0.0), point2=(
    0.0, 0.0, 1.0), region=mdb.models['Model-1'].rootAssembly.sets['Set-36'], 
    rotaryAcceleration=ON)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IN THIS TYPE OF ANALYSIS ONE WOULD NORMALLY EXPECT THAT A DENSITY FOR MATERIAL MARGING300STEEL WOULD BE DEFINED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE NO SOURCES OF INERTIA IN THIS MODEL. IT IS NECESSARY TO DEFINE A MATERIAL DENSITY OR LUMPED MASS OR INPUT THE MASS MATRIX FOR A PART OF THE MODEL USING THE MATRIX INPUT CAPABILITY FOR DYNAMIC ANALYSIS OR FOR GRAVITY LOADS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].loads['Load-2']
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-4', side1Edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.556122, 1.797739, 0.0), )))
mdb.models['Model-1'].SurfaceTraction(createStepName='Step-1', directionVector=
    (mdb.models['Model-1'].rootAssembly.referencePoints[62], 
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].vertices.findAt((
    2.95, 0.0, 0.0), )), distributionType=UNIFORM, field='', localCsys=None, 
    magnitude=400.0, name='Load-2', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-4'])
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-5', side1Edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt(((
    2.556122, 1.797739, 0.0), ), ((-3.013421, -0.8276, 0.0), ), ))
mdb.models['Model-1'].loads['Load-2'].setValues(region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-5'])
mdb.models['Model-1'].loads['Load-2'].setValues(directionVector=(
    mdb.models['Model-1'].rootAssembly.referencePoints[62], 
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt((
    0.639354, 0.895112, 0.0), ), MIDDLE)))
mdb.models['Model-1'].loads['Load-2'].setValues(directionVector=(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].edges.findAt((
    2.556122, 1.797739, 0.0), ), MIDDLE), 
    mdb.models['Model-1'].rootAssembly.instances['Part-5-1'].vertices.findAt((
    -2.410492, 1.988756, 0.0), )))
mdb.models['Model-1'].loads['Load-2'].setValues(angle=1.0, axis=AXIS_3, 
    directionVector=((0.0, 0.0, 0.0), (1.0, 0.0, 0.0)), localCsys=
    mdb.models['Model-1'].rootAssembly.datums[75])
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 7904, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 18:37:04 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-2'].setValues(magnitude=1000.0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 69396, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 18:38:30 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-2'].setValues(magnitude=4000.0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 39796, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 18:40:58 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].resume()
mdb.models['Model-1'].loads['Load-1'].suppress()
mdb.models['Model-1'].loads['Load-1'].resume()
mdb.models['Model-1'].loads['Load-2'].suppress()
mdb.models['Model-1'].loads['Load-1'].setValues(distributionType=UNIFORM, 
    field='', follower=ON)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 63888, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jun 17 18:44:35 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-2'].resume()
mdb.models['Model-1'].loads['Load-1'].suppress()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 79724, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Jun 18 08:36:28 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-2'].setValues(angle=0.0, axis=AXIS_1, 
    directionVector=((0.0, 0.0, 0.0), (0.0, 1.0, 0.0)))
mdb.models['Model-1'].loads['Load-2'].setValues(magnitude=8000.0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 40188, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1107 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 153 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': ' 1U', 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.125, 'attempts': 2, 
    'timeIncrement': 0.025, 'increment': 2, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 1 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 263 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 3 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.125, 'attempts': ' 1U', 
    'timeIncrement': 0.025, 'increment': 3, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.13125, 'attempts': 2, 
    'timeIncrement': 0.00625, 'increment': 3, 'stepTime': 0.13125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1375, 'attempts': 1, 
    'timeIncrement': 0.00625, 'increment': 4, 'stepTime': 0.1375, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.146875, 'attempts': 1, 
    'timeIncrement': 0.009375, 'increment': 5, 'stepTime': 0.146875, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 535 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 146 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.146875, 'attempts': ' 1U', 
    'timeIncrement': 0.0140625, 'increment': 6, 'stepTime': 0.146875, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 347 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 611 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 207 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.146875, 'attempts': ' 2U', 
    'timeIncrement': 0.003515625, 'increment': 6, 'stepTime': 0.146875, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.14775390625, 'attempts': 3, 
    'timeIncrement': 0.00087890625, 'increment': 6, 'stepTime': 0.14775390625, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1486328125, 'attempts': 1, 
    'timeIncrement': 0.00087890625, 'increment': 7, 'stepTime': 0.1486328125, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 200 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 221 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 754 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 495 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1486328125, 
    'attempts': ' 1U', 'timeIncrement': 0.00087890625, 'increment': 8, 
    'stepTime': 0.1486328125, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1488525390625, 
    'attempts': 2, 'timeIncrement': 0.0002197265625, 'increment': 8, 
    'stepTime': 0.1488525390625, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.149072265625, 'attempts': 1, 
    'timeIncrement': 0.0002197265625, 'increment': 9, 
    'stepTime': 0.149072265625, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 14 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 18 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 18 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 18 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1492919921875, 
    'attempts': 1, 'timeIncrement': 0.0002197265625, 'increment': 10, 
    'stepTime': 0.1492919921875, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 63 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 73 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 77 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 77 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 77 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.14962158203125, 
    'attempts': 1, 'timeIncrement': 0.00032958984375, 'increment': 11, 
    'stepTime': 0.14962158203125, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 180 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 201 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 222 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 347 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 6 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.14962158203125, 
    'attempts': ' 1U', 'timeIncrement': 0.000494384765625, 'increment': 12, 
    'stepTime': 0.14962158203125, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.149745178222656, 
    'attempts': 2, 'timeIncrement': 0.00012359619140625, 'increment': 12, 
    'stepTime': 0.149745178222656, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 22 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 26 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 27 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 27 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 27 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.149930572509766, 
    'attempts': 1, 'timeIncrement': 0.000185394287109375, 'increment': 13, 
    'stepTime': 0.149930572509766, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 68 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 79 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 84 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 84 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 84 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.15020866394043, 
    'attempts': 1, 'timeIncrement': 0.000278091430664063, 'increment': 14, 
    'stepTime': 0.15020866394043, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 184 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 206 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 220 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 220 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 220 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.150625801086426, 
    'attempts': 1, 'timeIncrement': 0.000417137145996094, 'increment': 15, 
    'stepTime': 0.150625801086426, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 335 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 370 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 387 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 671 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 72 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.150625801086426, 
    'attempts': ' 1U', 'timeIncrement': 0.000625705718994141, 'increment': 16, 
    'stepTime': 0.150625801086426, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 22 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 27 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.150782227516174, 
    'attempts': 2, 'timeIncrement': 0.000156426429748535, 'increment': 16, 
    'stepTime': 0.150782227516174, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 28 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 29 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.150938653945923, 
    'attempts': 1, 'timeIncrement': 0.000156426429748535, 'increment': 17, 
    'stepTime': 0.150938653945923, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 30 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 32 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 32 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.151095080375671, 
    'attempts': 1, 'timeIncrement': 0.000156426429748535, 'increment': 18, 
    'stepTime': 0.151095080375671, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 87 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 94 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 95 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 95 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.151329720020294, 
    'attempts': 1, 'timeIncrement': 0.000234639644622803, 'increment': 19, 
    'stepTime': 0.151329720020294, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 220 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 235 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 238 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 238 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 238 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 238 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.151681679487228, 
    'attempts': 1, 'timeIncrement': 0.000351959466934204, 'increment': 20, 
    'stepTime': 0.151681679487228, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 238 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 256 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 263 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 263 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 263 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 263 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.152033638954163, 
    'attempts': 1, 'timeIncrement': 0.000351959466934204, 'increment': 21, 
    'stepTime': 0.152033638954163, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 263 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 278 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 283 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 284 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 284 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 284 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.152385598421097, 
    'attempts': 1, 'timeIncrement': 0.000351959466934204, 'increment': 22, 
    'stepTime': 0.152385598421097, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 284 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 298 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 302 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 303 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 303 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 303 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.152737557888031, 
    'attempts': 1, 'timeIncrement': 0.000351959466934204, 'increment': 23, 
    'stepTime': 0.152737557888031, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 303 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 327 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 339 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 707 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 53 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.152737557888031, 
    'attempts': ' 1U', 'timeIncrement': 0.000351959466934204, 'increment': 24, 
    'stepTime': 0.152737557888031, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.152825547754765, 
    'attempts': 2, 'timeIncrement': 8.7989866733551e-05, 'increment': 24, 
    'stepTime': 0.152825547754765, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.152913537621498, 
    'attempts': 1, 'timeIncrement': 8.7989866733551e-05, 'increment': 25, 
    'stepTime': 0.152913537621498, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 20 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 18 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 18 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 18 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.153045522421598, 
    'attempts': 1, 'timeIncrement': 0.000131984800100327, 'increment': 26, 
    'stepTime': 0.153045522421598, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 110 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 118 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 119 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 119 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 119 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.153243499621749, 
    'attempts': 1, 'timeIncrement': 0.00019797720015049, 'increment': 27, 
    'stepTime': 0.153243499621749, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 271 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 285 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 289 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 289 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 289 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.153540465421975, 
    'attempts': 1, 'timeIncrement': 0.000296965800225735, 'increment': 28, 
    'stepTime': 0.153540465421975, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 436 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 446 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 449 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 466 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 907 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 130 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.153540465421975, 
    'attempts': ' 1U', 'timeIncrement': 0.000445448700338602, 'increment': 29, 
    'stepTime': 0.153540465421975, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.153651827597059, 
    'attempts': 2, 'timeIncrement': 0.000111362175084651, 'increment': 29, 
    'stepTime': 0.153651827597059, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.153763189772144, 
    'attempts': 1, 'timeIncrement': 0.000111362175084651, 'increment': 30, 
    'stepTime': 0.153763189772144, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 2 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.153874551947229, 
    'attempts': 1, 'timeIncrement': 0.000111362175084651, 'increment': 31, 
    'stepTime': 0.153874551947229, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 75 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 76 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 76 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 76 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.154041595209856, 
    'attempts': 1, 'timeIncrement': 0.000167043262626976, 'increment': 32, 
    'stepTime': 0.154041595209856, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 237 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 240 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 242 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 242 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 242 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.154292160103796, 
    'attempts': 1, 'timeIncrement': 0.000250564893940464, 'increment': 33, 
    'stepTime': 0.154292160103796, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 417 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 428 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 431 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 431 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 431 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 431 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.154668007444707, 
    'attempts': 1, 'timeIncrement': 0.000375847340910696, 'increment': 34, 
    'stepTime': 0.154668007444707, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 431 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 448 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 450 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 451 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 451 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 451 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 451 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.155043854785617, 
    'attempts': 1, 'timeIncrement': 0.000375847340910696, 'increment': 35, 
    'stepTime': 0.155043854785617, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 451 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 460 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 463 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 465 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 465 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 465 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.155419702126528, 
    'attempts': 1, 'timeIncrement': 0.000375847340910696, 'increment': 36, 
    'stepTime': 0.155419702126528, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 465 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 480 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 480 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 479 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 586 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 36 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.155419702126528, 
    'attempts': ' 1U', 'timeIncrement': 0.000375847340910696, 'increment': 37, 
    'stepTime': 0.155419702126528, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.155513663961756, 
    'attempts': 2, 'timeIncrement': 9.39618352276739e-05, 'increment': 37, 
    'stepTime': 0.155513663961756, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.155607625796983, 
    'attempts': 1, 'timeIncrement': 9.39618352276739e-05, 'increment': 38, 
    'stepTime': 0.155607625796983, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 47 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 46 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 47 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 47 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.155748568549825, 
    'attempts': 1, 'timeIncrement': 0.000140942752841511, 'increment': 39, 
    'stepTime': 0.155748568549825, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 213 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 217 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 218 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 218 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 218 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.155959982679087, 
    'attempts': 1, 'timeIncrement': 0.000211414129262266, 'increment': 40, 
    'stepTime': 0.155959982679087, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 409 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 418 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 419 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 419 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 419 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.156277103872981, 
    'attempts': 1, 'timeIncrement': 0.000317121193893399, 'increment': 41, 
    'stepTime': 0.156277103872981, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 575 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 588 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 595 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 593 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 605 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 53 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.156277103872981, 
    'attempts': ' 1U', 'timeIncrement': 0.000475681790840099, 'increment': 42, 
    'stepTime': 0.156277103872981, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 16 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 16 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 17 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 17 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.156396024320691, 
    'attempts': 2, 'timeIncrement': 0.000118920447710025, 'increment': 42, 
    'stepTime': 0.156396024320691, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 148 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 151 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 153 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 153 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 153 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.156574404992256, 
    'attempts': 1, 'timeIncrement': 0.000178380671565037, 'increment': 43, 
    'stepTime': 0.156574404992256, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 355 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 362 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 365 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 364 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 364 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.156841975999603, 
    'attempts': 1, 'timeIncrement': 0.000267571007347556, 'increment': 44, 
    'stepTime': 0.156841975999603, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT HAS EXCEEDED FIFTY TIMES THE STRAIN TO CAUSE FIRST YIELD AT 542 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Warning message limit reached. No further warning messages will be reported.\nPlease see the dat file for more warnings.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.157243332510625, 
    'attempts': 1, 'timeIncrement': 0.000401356511021334, 'increment': 45, 
    'stepTime': 0.157243332510625, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.157845367277157, 
    'attempts': 1, 'timeIncrement': 0.000602034766532, 'increment': 46, 
    'stepTime': 0.157845367277157, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.157845367277157, 
    'attempts': ' 1U', 'timeIncrement': 0.000602034766532, 'increment': 47, 
    'stepTime': 0.157845367277157, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.15799587596879, 
    'attempts': 2, 'timeIncrement': 0.000150508691633, 'increment': 47, 
    'stepTime': 0.15799587596879, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.158146384660423, 
    'attempts': 1, 'timeIncrement': 0.000150508691633, 'increment': 48, 
    'stepTime': 0.158146384660423, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.158372147697872, 
    'attempts': 1, 'timeIncrement': 0.0002257630374495, 'increment': 49, 
    'stepTime': 0.158372147697872, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.158710792254046, 
    'attempts': 1, 'timeIncrement': 0.00033864455617425, 'increment': 50, 
    'stepTime': 0.158710792254046, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.159218759088308, 
    'attempts': 1, 'timeIncrement': 0.000507966834261375, 'increment': 51, 
    'stepTime': 0.159218759088308, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.159218759088308, 
    'attempts': ' 1U', 'timeIncrement': 0.000507966834261375, 'increment': 52, 
    'stepTime': 0.159218759088308, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.159345750796873, 
    'attempts': 2, 'timeIncrement': 0.000126991708565344, 'increment': 52, 
    'stepTime': 0.159345750796873, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.159472742505438, 
    'attempts': 1, 'timeIncrement': 0.000126991708565344, 'increment': 53, 
    'stepTime': 0.159472742505438, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.159663230068286, 
    'attempts': 1, 'timeIncrement': 0.000190487562848016, 'increment': 54, 
    'stepTime': 0.159663230068286, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.159948961412558, 
    'attempts': 1, 'timeIncrement': 0.000285731344272024, 'increment': 55, 
    'stepTime': 0.159948961412558, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.160377558428966, 
    'attempts': 1, 'timeIncrement': 0.000428597016408035, 'increment': 56, 
    'stepTime': 0.160377558428966, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.160806155445374, 
    'attempts': 1, 'timeIncrement': 0.000428597016408035, 'increment': 57, 
    'stepTime': 0.160806155445374, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.161234752461783, 
    'attempts': 1, 'timeIncrement': 0.000428597016408035, 'increment': 58, 
    'stepTime': 0.161234752461783, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.161663349478191, 
    'attempts': 1, 'timeIncrement': 0.000428597016408035, 'increment': 59, 
    'stepTime': 0.161663349478191, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.161663349478191, 
    'attempts': ' 1U', 'timeIncrement': 0.000428597016408035, 'increment': 60, 
    'stepTime': 0.161663349478191, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.161770498732293, 
    'attempts': 2, 'timeIncrement': 0.000107149254102009, 'increment': 60, 
    'stepTime': 0.161770498732293, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.161877647986395, 
    'attempts': 1, 'timeIncrement': 0.000107149254102009, 'increment': 61, 
    'stepTime': 0.161877647986395, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.162038371867548, 
    'attempts': 1, 'timeIncrement': 0.000160723881153013, 'increment': 62, 
    'stepTime': 0.162038371867548, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.162279457689277, 
    'attempts': 1, 'timeIncrement': 0.00024108582172952, 'increment': 63, 
    'stepTime': 0.162279457689277, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.162641086421871, 
    'attempts': 1, 'timeIncrement': 0.00036162873259428, 'increment': 64, 
    'stepTime': 0.162641086421871, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.162641086421871, 
    'attempts': ' 1U', 'timeIncrement': 0.00054244309889142, 'increment': 65, 
    'stepTime': 0.162641086421871, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.162776697196594, 
    'attempts': 2, 'timeIncrement': 0.000135610774722855, 'increment': 65, 
    'stepTime': 0.162776697196594, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.162980113358679, 
    'attempts': 1, 'timeIncrement': 0.000203416162084282, 'increment': 66, 
    'stepTime': 0.162980113358679, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.163285237601805, 
    'attempts': 1, 'timeIncrement': 0.000305124243126424, 'increment': 67, 
    'stepTime': 0.163285237601805, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.163590361844931, 
    'attempts': 1, 'timeIncrement': 0.000305124243126424, 'increment': 68, 
    'stepTime': 0.163590361844931, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.163895486088058, 
    'attempts': 1, 'timeIncrement': 0.000305124243126424, 'increment': 69, 
    'stepTime': 0.163895486088058, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.164200610331184, 
    'attempts': 1, 'timeIncrement': 0.000305124243126424, 'increment': 70, 
    'stepTime': 0.164200610331184, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.164505734574311, 
    'attempts': 1, 'timeIncrement': 0.000305124243126424, 'increment': 71, 
    'stepTime': 0.164505734574311, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.164810858817437, 
    'attempts': 1, 'timeIncrement': 0.000305124243126424, 'increment': 72, 
    'stepTime': 0.164810858817437, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165115983060564, 
    'attempts': 1, 'timeIncrement': 0.000305124243126424, 'increment': 73, 
    'stepTime': 0.165115983060564, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165115983060564, 
    'attempts': ' 1U', 'timeIncrement': 0.000305124243126424, 'increment': 74, 
    'stepTime': 0.165115983060564, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165192264121345, 
    'attempts': 2, 'timeIncrement': 7.62810607816059e-05, 'increment': 74, 
    'stepTime': 0.165192264121345, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165192264121345, 
    'attempts': ' 1U', 'timeIncrement': 0.000114421591172409, 'increment': 75, 
    'stepTime': 0.165192264121345, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165220869519138, 
    'attempts': 2, 'timeIncrement': 2.86053977931022e-05, 'increment': 75, 
    'stepTime': 0.165220869519138, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165263777615828, 
    'attempts': 1, 'timeIncrement': 4.29080966896533e-05, 'increment': 76, 
    'stepTime': 0.165263777615828, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165328139760862, 
    'attempts': 1, 'timeIncrement': 6.436214503448e-05, 'increment': 77, 
    'stepTime': 0.165328139760862, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165424682978414, 
    'attempts': 1, 'timeIncrement': 9.654321755172e-05, 'increment': 78, 
    'stepTime': 0.165424682978414, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165569497804742, 
    'attempts': 1, 'timeIncrement': 0.00014481482632758, 'increment': 79, 
    'stepTime': 0.165569497804742, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 80, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.165786720044233, 
    'attempts': 1, 'timeIncrement': 0.00021722223949137, 'increment': 80, 
    'stepTime': 0.165786720044233, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 81, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.16611255340347, 
    'attempts': 1, 'timeIncrement': 0.000325833359237055, 'increment': 81, 
    'stepTime': 0.16611255340347, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 82, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.166438386762707, 
    'attempts': 1, 'timeIncrement': 0.000325833359237055, 'increment': 82, 
    'stepTime': 0.166438386762707, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.166438386762707, 
    'attempts': ' 1U', 'timeIncrement': 0.000325833359237055, 'increment': 83, 
    'stepTime': 0.166438386762707, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 83, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.166519845102516, 
    'attempts': 2, 'timeIncrement': 8.14583398092637e-05, 'increment': 83, 
    'stepTime': 0.166519845102516, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 84, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.16664203261223, 
    'attempts': 1, 'timeIncrement': 0.000122187509713896, 'increment': 84, 
    'stepTime': 0.16664203261223, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.16664203261223, 
    'attempts': ' 1U', 'timeIncrement': 0.000183281264570843, 'increment': 85, 
    'stepTime': 0.16664203261223, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 85, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.166687852928373, 
    'attempts': 2, 'timeIncrement': 4.58203161427108e-05, 'increment': 85, 
    'stepTime': 0.166687852928373, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 86, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.166756583402587, 
    'attempts': 1, 'timeIncrement': 6.87304742140663e-05, 'increment': 86, 
    'stepTime': 0.166756583402587, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 87, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.166859679113908, 
    'attempts': 1, 'timeIncrement': 0.000103095711321099, 'increment': 87, 
    'stepTime': 0.166859679113908, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 88, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.16701432268089, 
    'attempts': 1, 'timeIncrement': 0.000154643566981649, 'increment': 88, 
    'stepTime': 0.16701432268089, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 89, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.167168966247872, 
    'attempts': 1, 'timeIncrement': 0.000154643566981649, 'increment': 89, 
    'stepTime': 0.167168966247872, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 90, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.167323609814853, 
    'attempts': 1, 'timeIncrement': 0.000154643566981649, 'increment': 90, 
    'stepTime': 0.167323609814853, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 91, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.167555575165326, 
    'attempts': 1, 'timeIncrement': 0.000231965350472474, 'increment': 91, 
    'stepTime': 0.167555575165326, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 92, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.167903523191034, 
    'attempts': 1, 'timeIncrement': 0.00034794802570871, 'increment': 92, 
    'stepTime': 0.167903523191034, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 93, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.168251471216743, 
    'attempts': 1, 'timeIncrement': 0.00034794802570871, 'increment': 93, 
    'stepTime': 0.168251471216743, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 94, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.168599419242452, 
    'attempts': 1, 'timeIncrement': 0.00034794802570871, 'increment': 94, 
    'stepTime': 0.168599419242452, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 95, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.16894736726816, 
    'attempts': 1, 'timeIncrement': 0.00034794802570871, 'increment': 95, 
    'stepTime': 0.16894736726816, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 96, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.169295315293869, 
    'attempts': 1, 'timeIncrement': 0.00034794802570871, 'increment': 96, 
    'stepTime': 0.169295315293869, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 97, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.169643263319578, 
    'attempts': 1, 'timeIncrement': 0.00034794802570871, 'increment': 97, 
    'stepTime': 0.169643263319578, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 98, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.169991211345287, 
    'attempts': 1, 'timeIncrement': 0.00034794802570871, 'increment': 98, 
    'stepTime': 0.169991211345287, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 99, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.17051313338385, 
    'attempts': 1, 'timeIncrement': 0.000521922038563066, 'increment': 99, 
    'stepTime': 0.17051313338385, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 100, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.171035055422413, 
    'attempts': 1, 'timeIncrement': 0.000521922038563066, 'increment': 100, 
    'stepTime': 0.171035055422413, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-2'].suppress()
mdb.models['Model-1'].loads['Load-1'].resume()
mdb.models['Model-1'].SurfaceTraction(createStepName='Step-1', directionVector=
    ((0.0, 0.0, 0.0), (1.0, 0.0, 0.0)), distributionType=UNIFORM, field='', 
    localCsys=mdb.models['Model-1'].rootAssembly.datums[75], magnitude=500.0, 
    name='Load-3', region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-3']
    , traction=GENERAL)
mdb.models['Model-1'].loads['Load-1'].suppress()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN ORIENTATION HAS BEEN DEFINED WITH A SURFACE OR EDGE TRACTION. IF THIS LOAD IS APPLIED TO A 2D ELEMENT YOU MUST MAKE SURE THAT THE ROTATED LOAD ONLY HAS NON-ZERO COMPONENTS IN THE GLOBAL 1-2 PLANE. ANY NON-ZERO COMPONENT WHICH IS NOT IN THE 1-2 PLANE WILL BE IGNORED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 59608, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Jun 18 08:43:54 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-2'].resume()
mdb.models['Model-1'].loads['Load-1'].resume()
mdb.models['Model-1'].loads['Load-2'].suppress()
mdb.models['Model-1'].loads['Load-3'].suppress()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 24704, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Jun 18 08:45:52 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].parts['Part-4'].setValues(space=TWO_D_PLANAR, type=
    ANALYTIC_RIGID_SURFACE)
#* Parts with type other than analytic rigid cannot change their type to 
#* analytic rigid.
mdb.models['Model-1'].parts['Part-4'].setValues(space=TWO_D_PLANAR, type=
    ANALYTIC_RIGID_SURFACE)
#* Parts with type other than analytic rigid cannot change their type to 
#* analytic rigid.
mdb.models['Model-1'].Material(name='Rigid Material')
mdb.models['Model-1'].materials['Rigid Material'].Elastic(table=((1e+15, 0.0), 
    ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].rootAssembly.features['Partition face-1'].sketch)
mdb.models['Model-1'].rootAssembly.projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].rootAssembly.features['Partition face-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].HomogeneousSolidSection(material='Rigid Material', name=
    'Section-3', thickness=None)
mdb.models['Model-1'].constraints['Constraint-4'].resume()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'One or more kinematic COUPLING constraint(s) have all or some of the nodes associated with each constraint belonging to rigid bodies. The COUPLING constraint(s) will not be applied at the nodes that belong to the rigid bodies. The nodes for which the COUPLING constraint(s) will not be enforced have been identified in node set WarnNodeOverconKCInRbd.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 20132, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Jun 18 09:00:53 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].constraints['Constraint-4'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-2'].resume()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Nodes belonging to 1 RIGID BODIES have boundary conditions prescribed at nodes other than the reference node(s). Because different *TRANSFORM options have been used at these nodes. these boundary conditions cannot be transferred to the correspondent reference node(s). Furthermore, these boundary conditions will be neglected.The reference node(s) of these rigid bodies have been identified in node set WarnNodeOverconBoundRBTra.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 69716, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Jun 18 09:02:58 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].constraints['Constraint-1'].setValues(tieRegion=None)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Nodes belonging to 1 RIGID BODIES have boundary conditions prescribed at nodes other than the reference node(s). Because different *TRANSFORM options have been used at these nodes. these boundary conditions cannot be transferred to the correspondent reference node(s). Furthermore, these boundary conditions will be neglected.The reference node(s) of these rigid bodies have been identified in node set WarnNodeOverconBoundRBTra.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Stuff\\Abaqus\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'BCDC-HCLQCX3', 'handle': 66808, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'stepName': 'Positive Torque', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 38.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65225.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Jun 18 09:08:52 2024', 
    'jobName': 'Job-1'})
# Save by ajbarcio on 2024_06_18-09.10.42; build 2023 2022_09_28-13.11.55 183150
